// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2012/1/6 ¤W¤È 10:22:28 from Type Library described below.

// ************************************************************************  //
// Type Lib: D:\WorkSpace\CMSCpp2.1\lib\EyeOneLib\EyeOne.dll (1)
// LIBID: {10A3A3EB-9E08-4B1A-8E14-7693FB50C5EC}
// LCID: 0
// Helpfile: D:\WorkSpace\CMSCpp2.1\lib\EyeOneLib\EyeOneCtrl.hlp
// HelpString: EyeOneCtrl ActiveX Control module
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   EYEONECTRLLib_TLBH
#define   EYEONECTRLLib_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Eyeonectrllib_tlb
{

// *********************************************************************//
// HelpString: EyeOneCtrl ActiveX Control module
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_EYEONECTRLLib = {0x10A3A3EB, 0x9E08, 0x4B1A,{ 0x8E, 0x14, 0x76,0x93, 0xFB, 0x50,0xC5, 0xEC} };
extern "C" const __declspec(selectany) GUID DIID__DEyeOneCtrl = {0x390C4317, 0x0F4A, 0x4957,{ 0x96, 0x96, 0x57,0x9C, 0x37, 0x3C,0xA8, 0x65} };
extern "C" const __declspec(selectany) GUID DIID__DEyeOneCtrlEvents = {0xDA563AD5, 0x1E29, 0x4F68,{ 0x87, 0x12, 0x5C,0x08, 0x42, 0xD0,0xCD, 0x14} };
extern "C" const __declspec(selectany) GUID CLSID_EyeOneCtrl = {0x9F1BC874, 0x20E0, 0x4272,{ 0xAA, 0xE5, 0xC4,0x5C, 0x8D, 0x86,0x58, 0x19} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{390C4317-0F4A-4957-9696-579C373CA865}") _DEyeOneCtrl;
typedef TComInterface<_DEyeOneCtrl, &DIID__DEyeOneCtrl> _DEyeOneCtrlPtr;

interface DECLSPEC_UUID("{DA563AD5-1E29-4F68-8712-5C0842D0CD14}") _DEyeOneCtrlEvents;
typedef TComInterface<_DEyeOneCtrlEvents, &DIID__DEyeOneCtrlEvents> _DEyeOneCtrlEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _DEyeOneCtrl EyeOneCtrl;
typedef _DEyeOneCtrlPtr EyeOneCtrlPtr;

#define LIBID_OF_EyeOneCtrl (&LIBID_EYEONECTRLLib)
// *********************************************************************//
// Interface: _DEyeOneCtrl
// Flags:     (4112) Hidden Dispatchable
// GUID:      {390C4317-0F4A-4957-9696-579C373CA865}
// *********************************************************************//
interface _DEyeOneCtrl : public TDispWrapper<IDispatch>
{
  BSTR __fastcall GetDeviceInfo(BSTR axKey)
  {
    _TDispID _dispid(/* GetDeviceInfo */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = axKey /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall IsConnected()
  {
    _TDispID _dispid(/* IsConnected */ DISPID(2));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall KeyPressed()
  {
    _TDispID _dispid(/* KeyPressed */ DISPID(3));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall Calibrate()
  {
    _TDispID _dispid(/* Calibrate */ DISPID(4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall TriggerMeasurement()
  {
    _TDispID _dispid(/* TriggerMeasurement */ DISPID(5));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetOption(BSTR axKey, BSTR axValue)
  {
    _TDispID _dispid(/* SetOption */ DISPID(6));
    TAutoArgs<2> _args;
    _args[1] = axKey /*[VT_BSTR:0]*/;
    _args[2] = axValue /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall GetOption(BSTR axKey)
  {
    _TDispID _dispid(/* GetOption */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = axKey /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetSubstrate(LPSAFEARRAY* xySubstrateSpectrum)
  {
    _TDispID _dispid(/* SetSubstrate */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = xySubstrateSpectrum /*[VT_SAFEARRAY:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetTriStimulus(LPSAFEARRAY* yxTriStimulus, long axIndex)
  {
    _TDispID _dispid(/* GetTriStimulus */ DISPID(9));
    TAutoArgs<2> _args;
    _args[1] = yxTriStimulus /*[VT_SAFEARRAY:1]*/;
    _args[2] = axIndex /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetDensity(float* axDensity, long axIndex)
  {
    _TDispID _dispid(/* GetDensity */ DISPID(10));
    TAutoArgs<2> _args;
    _args[1] = axDensity /*[VT_R4:1]*/;
    _args[2] = axIndex /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetDensities(LPSAFEARRAY* yxDensities, long* pxAutoDensityIndex, long axIndex)
  {
    _TDispID _dispid(/* GetDensities */ DISPID(11));
    TAutoArgs<3> _args;
    _args[1] = yxDensities /*[VT_SAFEARRAY:1]*/;
    _args[2] = pxAutoDensityIndex /*[VT_I4:1]*/;
    _args[3] = axIndex /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetSpectrum(LPSAFEARRAY* yxSpectrum, long axIndex)
  {
    _TDispID _dispid(/* GetSpectrum */ DISPID(12));
    TAutoArgs<2> _args;
    _args[1] = yxSpectrum /*[VT_SAFEARRAY:1]*/;
    _args[2] = axIndex /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


};
// *********************************************************************//
// Interface: _DEyeOneCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {DA563AD5-1E29-4F68-8712-5C0842D0CD14}
// *********************************************************************//
interface _DEyeOneCtrlEvents : public TDispWrapper<IDispatch>
{

};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _DEyeOneCtrl
// Flags:     (4112) Hidden Dispatchable
// GUID:      {390C4317-0F4A-4957-9696-579C373CA865}
// *********************************************************************//
template<class T>
class _DEyeOneCtrlDispT : public TAutoDriver<_DEyeOneCtrl>
{
public:
  _DEyeOneCtrlDispT(){}

  _DEyeOneCtrlDispT(_DEyeOneCtrl *pintf)
  {
    TAutoDriver<_DEyeOneCtrl>::Bind(pintf, false);
  }

  _DEyeOneCtrlDispT(_DEyeOneCtrlPtr pintf)
  {
    TAutoDriver<_DEyeOneCtrl>::Bind(pintf, true);
  }

  _DEyeOneCtrlDispT& operator=(_DEyeOneCtrl *pintf)
  {
    TAutoDriver<_DEyeOneCtrl>::Bind(pintf, false);
    return *this;
  }

  _DEyeOneCtrlDispT& operator=(_DEyeOneCtrlPtr pintf)
  {
    TAutoDriver<_DEyeOneCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_EyeOneCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_EyeOneCtrl);
  }

  BSTR            __fastcall GetDeviceInfo(BSTR axKey);
  long            __fastcall IsConnected();
  long            __fastcall KeyPressed();
  long            __fastcall Calibrate();
  long            __fastcall TriggerMeasurement();
  long            __fastcall SetOption(BSTR axKey, BSTR axValue);
  BSTR            __fastcall GetOption(BSTR axKey);
  long            __fastcall SetSubstrate(LPSAFEARRAY* xySubstrateSpectrum);
  long            __fastcall GetTriStimulus(LPSAFEARRAY* yxTriStimulus, long axIndex);
  long            __fastcall GetDensity(float* axDensity, long axIndex);
  long            __fastcall GetDensities(LPSAFEARRAY* yxDensities, long* pxAutoDensityIndex, 
                                          long axIndex);
  long            __fastcall GetSpectrum(LPSAFEARRAY* yxSpectrum, long axIndex);

};
typedef _DEyeOneCtrlDispT<_DEyeOneCtrl> _DEyeOneCtrlDisp;

// *********************************************************************//
// DispIntf:  _DEyeOneCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {DA563AD5-1E29-4F68-8712-5C0842D0CD14}
// *********************************************************************//
template <class T>
class _DEyeOneCtrlEventsDispT : public TAutoDriver<_DEyeOneCtrlEvents>
{
public:
  _DEyeOneCtrlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }


};
typedef _DEyeOneCtrlEventsDispT<_DEyeOneCtrlEvents> _DEyeOneCtrlEventsDisp;

// *********************************************************************//
// DispIntf:  _DEyeOneCtrl
// Flags:     (4112) Hidden Dispatchable
// GUID:      {390C4317-0F4A-4957-9696-579C373CA865}
// *********************************************************************//
template <class T> BSTR __fastcall
_DEyeOneCtrlDispT<T>::GetDeviceInfo(BSTR axKey)
{
  _TDispID _dispid(*this, OLETEXT("GetDeviceInfo"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = axKey /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DEyeOneCtrlDispT<T>::IsConnected()
{
  _TDispID _dispid(*this, OLETEXT("IsConnected"), DISPID(2));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DEyeOneCtrlDispT<T>::KeyPressed()
{
  _TDispID _dispid(*this, OLETEXT("KeyPressed"), DISPID(3));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DEyeOneCtrlDispT<T>::Calibrate()
{
  _TDispID _dispid(*this, OLETEXT("Calibrate"), DISPID(4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DEyeOneCtrlDispT<T>::TriggerMeasurement()
{
  _TDispID _dispid(*this, OLETEXT("TriggerMeasurement"), DISPID(5));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DEyeOneCtrlDispT<T>::SetOption(BSTR axKey, BSTR axValue)
{
  _TDispID _dispid(*this, OLETEXT("SetOption"), DISPID(6));
  TAutoArgs<2> _args;
  _args[1] = axKey /*[VT_BSTR:0]*/;
  _args[2] = axValue /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DEyeOneCtrlDispT<T>::GetOption(BSTR axKey)
{
  _TDispID _dispid(*this, OLETEXT("GetOption"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = axKey /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DEyeOneCtrlDispT<T>::SetSubstrate(LPSAFEARRAY* xySubstrateSpectrum)
{
  _TDispID _dispid(*this, OLETEXT("SetSubstrate"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = xySubstrateSpectrum /*[VT_SAFEARRAY:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DEyeOneCtrlDispT<T>::GetTriStimulus(LPSAFEARRAY* yxTriStimulus, long axIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetTriStimulus"), DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = yxTriStimulus /*[VT_SAFEARRAY:1]*/;
  _args[2] = axIndex /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DEyeOneCtrlDispT<T>::GetDensity(float* axDensity, long axIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetDensity"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = axDensity /*[VT_R4:1]*/;
  _args[2] = axIndex /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DEyeOneCtrlDispT<T>::GetDensities(LPSAFEARRAY* yxDensities, long* pxAutoDensityIndex, long axIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetDensities"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = yxDensities /*[VT_SAFEARRAY:1]*/;
  _args[2] = pxAutoDensityIndex /*[VT_I4:1]*/;
  _args[3] = axIndex /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DEyeOneCtrlDispT<T>::GetSpectrum(LPSAFEARRAY* yxSpectrum, long axIndex)
{
  _TDispID _dispid(*this, OLETEXT("GetSpectrum"), DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = yxSpectrum /*[VT_SAFEARRAY:1]*/;
  _args[2] = axIndex /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  _DEyeOneCtrlEvents
// Flags:     (4096) Dispatchable
// GUID:      {DA563AD5-1E29-4F68-8712-5C0842D0CD14}
// *********************************************************************//
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : EyeOneCtrl
// Event Interface : _DEyeOneCtrlEvents
// *********************************************************************//
template <class T>
class TEvents_EyeOneCtrl : public IConnectionPointImpl<T,
                                                 &DIID__DEyeOneCtrlEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
protected:
  _DEyeOneCtrlEventsDisp m_EventIntfObj;
};

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Eyeonectrllib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Eyeonectrllib_tlb;
#endif

#pragma option pop

#endif // EYEONECTRLLib_TLBH
