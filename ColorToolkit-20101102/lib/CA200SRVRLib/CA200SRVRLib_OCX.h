// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2010/1/11 ¤U¤È 08:10:39 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\CA-SDK\SDK\CA200Srvr.dll (1)
// LIBID: {81480671-9287-43D4-8A21-F0CB0157077F}
// LCID: 0
// Helpfile: 
// HelpString: CA200Srvr 1.1 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   CA200SRVRLib_OCXH
#define   CA200SRVRLib_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#define NO_PROMPT_ON_HRCHECK_FAILURE
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "CA200SRVRLib_TLB.h"
namespace Ca200srvrlib_tlb
{

// *********************************************************************//
// HelpString: CA200Srvr 1.1 Type Library
// Version:    1.1
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TCa200
// Help String      : Ca200 Class
// Default Interface: ICa200
// Def. Intf. Object: ICa200Ptr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TCa200 : public Oleserver::TOleServer
{
  ICa200Ptr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TCa200(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ICa200Ptr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ICa200Ptr intf);


  Ca200srvrlib_tlb::ICasPtr __fastcall get_Cas(void)
  {
    return GetDefaultInterface()->get_Cas();
  }

  Ca200srvrlib_tlb::ICaPtr __fastcall get_SingleCa(void)
  {
    return GetDefaultInterface()->get_SingleCa();
  }

  void __fastcall SetConfiguration(long CaNumberVal/*[in]*/, BSTR ConnecStringVal/*[in]*/, 
                                   long PortVal/*[in]*/, long BaudRateVal/*[in,def,opt]*/)
  {
    GetDefaultInterface()->SetConfiguration(CaNumberVal/*[in]*/, ConnecStringVal/*[in]*/, 
                                            PortVal/*[in]*/, BaudRateVal/*[in,def,opt]*/);
  }

  void __fastcall AutoConnect(void)
  {
    GetDefaultInterface()->AutoConnect();
  }

  __property Ca200srvrlib_tlb::ICasPtr Cas={ read=get_Cas };
  __property Ca200srvrlib_tlb::ICaPtr SingleCa={ read=get_SingleCa };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TCas
// Help String      : Cas Class
// Default Interface: ICas
// Def. Intf. Object: ICasPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TCas : public Oleserver::TOleServer
{
  ICasPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TCas(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ICasPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ICasPtr intf);


  Ca200srvrlib_tlb::ICaPtr __fastcall get_Item(VARIANT IndexVal/*[in]*/)
  {
    return GetDefaultInterface()->get_Item(IndexVal/*[in]*/);
  }

  long __fastcall get_Count(void)
  {
    return GetDefaultInterface()->get_Count();
  }

  Ca200srvrlib_tlb::ICaPtr __fastcall get_ItemOfNumber(long CaNumberVal/*[in]*/)
  {
    return GetDefaultInterface()->get_ItemOfNumber(CaNumberVal/*[in]*/);
  }

  void __fastcall SendMsr(void)
  {
    GetDefaultInterface()->SendMsr();
  }

  void __fastcall ReceiveMsr(void)
  {
    GetDefaultInterface()->ReceiveMsr();
  }

  void __fastcall SetCaID(long CaNumberVal/*[in]*/, BSTR CaIDVal/*[in]*/)
  {
    GetDefaultInterface()->SetCaID(CaNumberVal/*[in]*/, CaIDVal/*[in]*/);
  }

  __property Ca200srvrlib_tlb::ICaPtr Item[VARIANT IndexVal]={ read=get_Item };
  __property long Count={ read=get_Count };
  __property Ca200srvrlib_tlb::ICaPtr ItemOfNumber[long CaNumberVal]={ read=get_ItemOfNumber };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TCa
// Help String      : Ca Class
// Default Interface: ICa
// Def. Intf. Object: ICaPtr
// Def. Intf. DISP? : No
// Event   Interface: _ICaEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TCa : public Oleserver::TOleServer
{
  ICaPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TCa(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  ICaPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(ICaPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  Ca200srvrlib_tlb::IProbesPtr __fastcall get_Probes(void)
  {
    return GetDefaultInterface()->get_Probes();
  }

  Ca200srvrlib_tlb::IOutputProbesPtr __fastcall get_OutputProbes(void)
  {
    return GetDefaultInterface()->get_OutputProbes();
  }

  Ca200srvrlib_tlb::IMemoryPtr __fastcall get_Memory(void)
  {
    return GetDefaultInterface()->get_Memory();
  }

  BSTR __fastcall get_DisplayProbe(void)
  {
    return GetDefaultInterface()->get_DisplayProbe();
  }

  void __fastcall set_DisplayProbe(BSTR DisplayProbeVal/*[in]*/)
  {
    GetDefaultInterface()->set_DisplayProbe(DisplayProbeVal/*[in]*/);
  }

  Ca200srvrlib_tlb::IProbePtr __fastcall get_SingleProbe(void)
  {
    return GetDefaultInterface()->get_SingleProbe();
  }

  float __fastcall get_SyncMode(void)
  {
    return GetDefaultInterface()->get_SyncMode();
  }

  void __fastcall set_SyncMode(float SyncModeVal/*[in]*/)
  {
    GetDefaultInterface()->set_SyncMode(SyncModeVal/*[in]*/);
  }

  long __fastcall get_DisplayMode(void)
  {
    return GetDefaultInterface()->get_DisplayMode();
  }

  void __fastcall set_DisplayMode(long DisplayModeVal/*[in]*/)
  {
    GetDefaultInterface()->set_DisplayMode(DisplayModeVal/*[in]*/);
  }

  long __fastcall get_DisplayDigits(void)
  {
    return GetDefaultInterface()->get_DisplayDigits();
  }

  void __fastcall set_DisplayDigits(long DisplayDigitsVal/*[in]*/)
  {
    GetDefaultInterface()->set_DisplayDigits(DisplayDigitsVal/*[in]*/);
  }

  long __fastcall get_AveragingMode(void)
  {
    return GetDefaultInterface()->get_AveragingMode();
  }

  void __fastcall set_AveragingMode(long AveragingModeVal/*[in]*/)
  {
    GetDefaultInterface()->set_AveragingMode(AveragingModeVal/*[in]*/);
  }

  long __fastcall get_BrightnessUnit(void)
  {
    return GetDefaultInterface()->get_BrightnessUnit();
  }

  void __fastcall set_BrightnessUnit(long BrightnessUnitVal/*[in]*/)
  {
    GetDefaultInterface()->set_BrightnessUnit(BrightnessUnitVal/*[in]*/);
  }

  BSTR __fastcall get_CAType(void)
  {
    return GetDefaultInterface()->get_CAType();
  }

  BSTR __fastcall get_CAVersion(void)
  {
    return GetDefaultInterface()->get_CAVersion();
  }

  long __fastcall get_Number(void)
  {
    return GetDefaultInterface()->get_Number();
  }

  BSTR __fastcall get_PortID(void)
  {
    return GetDefaultInterface()->get_PortID();
  }

  BSTR __fastcall get_ID(void)
  {
    return GetDefaultInterface()->get_ID();
  }

  void __fastcall set_ID(BSTR CaIDVal/*[in]*/)
  {
    GetDefaultInterface()->set_ID(CaIDVal/*[in]*/);
  }

  long __fastcall get_CalStandard(void)
  {
    return GetDefaultInterface()->get_CalStandard();
  }

  void __fastcall set_CalStandard(long CalStandardVal/*[in]*/)
  {
    GetDefaultInterface()->set_CalStandard(CalStandardVal/*[in]*/);
  }

  void __fastcall set_RemoteMode(long Param1/*[in]*/)
  {
    GetDefaultInterface()->set_RemoteMode(Param1/*[in]*/);
  }

  void __fastcall CalZero(void)
  {
    GetDefaultInterface()->CalZero();
  }

  void __fastcall Measure(long newVal/*[in,def,opt]*/)
  {
    GetDefaultInterface()->Measure(newVal/*[in,def,opt]*/);
  }

  void __fastcall SetAnalyzerCalMode(void)
  {
    GetDefaultInterface()->SetAnalyzerCalMode();
  }

  void __fastcall Enter(void)
  {
    GetDefaultInterface()->Enter();
  }

  void __fastcall SetAnalogRange(float Range1Val/*[in]*/, float Range2Val/*[in]*/)
  {
    GetDefaultInterface()->SetAnalogRange(Range1Val/*[in]*/, Range2Val/*[in]*/);
  }

  void __fastcall SetPWROnStatus(void)
  {
    GetDefaultInterface()->SetPWROnStatus();
  }

  void __fastcall ResetAnalyzerCalMode(void)
  {
    GetDefaultInterface()->ResetAnalyzerCalMode();
  }

  void __fastcall SetLvxyCalMode(void)
  {
    GetDefaultInterface()->SetLvxyCalMode();
  }

  void __fastcall ResetLvxyCalMode(void)
  {
    GetDefaultInterface()->ResetLvxyCalMode();
  }

  void __fastcall SetAnalyzerCalData(long ColorVal)
  {
    GetDefaultInterface()->SetAnalyzerCalData(ColorVal);
  }

  void __fastcall SetDisplayProbe(long ProbeNumberVal)
  {
    GetDefaultInterface()->SetDisplayProbe(ProbeNumberVal);
  }

  void __fastcall SetLvxyCalData(long ColorVal, float XVal, float YVal, float LvVal)
  {
    GetDefaultInterface()->SetLvxyCalData(ColorVal, XVal, YVal, LvVal);
  }

  void __fastcall SetFMAAnalogRange(float RangeVal/*[in]*/)
  {
    GetDefaultInterface()->SetFMAAnalogRange(RangeVal/*[in]*/);
  }

  void __fastcall GetAnalogRange(float* Range1Val/*[out]*/, float* Range2Val/*[out]*/)
  {
    GetDefaultInterface()->GetAnalogRange(Range1Val/*[out]*/, Range2Val/*[out]*/);
  }

  void __fastcall GetFMAAnalogRange(float* RangeVal/*[out]*/)
  {
    GetDefaultInterface()->GetFMAAnalogRange(RangeVal/*[out]*/);
  }

  __property Ca200srvrlib_tlb::IProbesPtr Probes={ read=get_Probes };
  __property Ca200srvrlib_tlb::IOutputProbesPtr OutputProbes={ read=get_OutputProbes };
  __property Ca200srvrlib_tlb::IMemoryPtr Memory={ read=get_Memory };
  __property Ca200srvrlib_tlb::IProbePtr SingleProbe={ read=get_SingleProbe };
  __property BSTR CAType={ read=get_CAType };
  __property BSTR CAVersion={ read=get_CAVersion };
  __property long Number={ read=get_Number };
  __property BSTR PortID={ read=get_PortID };
  __property long RemoteMode={ };
  __property BSTR DisplayProbe={ read=get_DisplayProbe, stored=false };
  __property float SyncMode={ read=get_SyncMode, stored=false };
  __property long DisplayMode={ read=get_DisplayMode, stored=false };
  __property long DisplayDigits={ read=get_DisplayDigits, stored=false };
  __property long AveragingMode={ read=get_AveragingMode, stored=false };
  __property long BrightnessUnit={ read=get_BrightnessUnit, stored=false };
  __property BSTR ID={ read=get_ID, stored=false };
  __property long CalStandard={ read=get_CalStandard, stored=false };
private:
  TNotifyEvent                   FOnExeCalZero;
__published:
  __property TNotifyEvent OnExeCalZero={ read=FOnExeCalZero, write=FOnExeCalZero };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TMemory
// Help String      : Memory Class
// Default Interface: IMemory
// Def. Intf. Object: IMemoryPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TMemory : public Oleserver::TOleServer
{
  IMemoryPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TMemory(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IMemoryPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IMemoryPtr intf);


  long __fastcall get_ChannelNO(void)
  {
    return GetDefaultInterface()->get_ChannelNO();
  }

  void __fastcall set_ChannelNO(long ChannelNOVal/*[in]*/)
  {
    GetDefaultInterface()->set_ChannelNO(ChannelNOVal/*[in]*/);
  }

  BSTR __fastcall get_ChannelID(void)
  {
    return GetDefaultInterface()->get_ChannelID();
  }

  void __fastcall set_ChannelID(BSTR ChannelIDVal/*[in]*/)
  {
    GetDefaultInterface()->set_ChannelID(ChannelIDVal/*[in]*/);
  }

  void __fastcall GetReferenceColor(BSTR ProbeIDVal/*[in]*/, float* XVal/*[out]*/, 
                                    float* YVal/*[out]*/, float* LvVal/*[out]*/)
  {
    GetDefaultInterface()->GetReferenceColor(ProbeIDVal/*[in]*/, XVal/*[out]*/, YVal/*[out]*/, 
                                             LvVal/*[out]*/);
  }

  void __fastcall SetChannelID(BSTR ChannelIDVal/*[in]*/)
  {
    GetDefaultInterface()->SetChannelID(ChannelIDVal/*[in]*/);
  }

  void __fastcall GetMemoryStatus(long ProbeNOVal/*[in]*/, long* CalProbeSNOVal/*[out]*/, 
                                  long* RefProbeSNOVal/*[out]*/, long* CalModeVal/*[out]*/)
  {
    GetDefaultInterface()->GetMemoryStatus(ProbeNOVal/*[in]*/, CalProbeSNOVal/*[out]*/, 
                                           RefProbeSNOVal/*[out]*/, CalModeVal/*[out]*/);
  }

  long __fastcall CheckCalData(long ProbeNOVal/*[in]*/, BSTR FileNameVal/*[in]*/)
  {
    return GetDefaultInterface()->CheckCalData(ProbeNOVal/*[in]*/, FileNameVal/*[in]*/);
  }

  void __fastcall CopyToFile(long ProbeNOVal/*[in]*/, BSTR FileNameVal/*[in]*/)
  {
    GetDefaultInterface()->CopyToFile(ProbeNOVal/*[in]*/, FileNameVal/*[in]*/);
  }

  void __fastcall CopyFromFile(long ProbeNOVal/*[in]*/, BSTR FileNameVal/*[in]*/)
  {
    GetDefaultInterface()->CopyFromFile(ProbeNOVal/*[in]*/, FileNameVal/*[in]*/);
  }

  __property long ChannelNO={ read=get_ChannelNO, stored=false };
  __property BSTR ChannelID={ read=get_ChannelID, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TProbes
// Help String      : Probes Class
// Default Interface: IProbes
// Def. Intf. Object: IProbesPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TProbes : public Oleserver::TOleServer
{
  IProbesPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TProbes(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IProbesPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IProbesPtr intf);


  Ca200srvrlib_tlb::IProbePtr __fastcall get_Item(VARIANT IndexVal/*[in]*/)
  {
    return GetDefaultInterface()->get_Item(IndexVal/*[in]*/);
  }

  long __fastcall get_Count(void)
  {
    return GetDefaultInterface()->get_Count();
  }

  Ca200srvrlib_tlb::IProbePtr __fastcall get_ItemOfNumber(long ProbeNumber/*[in]*/)
  {
    return GetDefaultInterface()->get_ItemOfNumber(ProbeNumber/*[in]*/);
  }

  void __fastcall SetProbeID(long ProbeNumberVal/*[in]*/, BSTR ProbeIDVal/*[in]*/)
  {
    GetDefaultInterface()->SetProbeID(ProbeNumberVal/*[in]*/, ProbeIDVal/*[in]*/);
  }

  __property Ca200srvrlib_tlb::IProbePtr Item[VARIANT IndexVal]={ read=get_Item };
  __property long Count={ read=get_Count };
  __property Ca200srvrlib_tlb::IProbePtr ItemOfNumber[long ProbeNumber]={ read=get_ItemOfNumber };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TProbe
// Help String      : Probe Class
// Default Interface: IProbe
// Def. Intf. Object: IProbePtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TProbe : public Oleserver::TOleServer
{
  IProbePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TProbe(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IProbePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IProbePtr intf);


  float __fastcall get_X(void)
  {
    return GetDefaultInterface()->get_X();
  }

  float __fastcall get_Y(void)
  {
    return GetDefaultInterface()->get_Y();
  }

  float __fastcall get_Z(void)
  {
    return GetDefaultInterface()->get_Z();
  }

  float __fastcall get_FlckrJEITA(void)
  {
    return GetDefaultInterface()->get_FlckrJEITA();
  }

  long __fastcall get_Number(void)
  {
    return GetDefaultInterface()->get_Number();
  }

  BSTR __fastcall get_ID(void)
  {
    return GetDefaultInterface()->get_ID();
  }

  void __fastcall set_ID(BSTR ProbeIDVal/*[in]*/)
  {
    GetDefaultInterface()->set_ID(ProbeIDVal/*[in]*/);
  }

  BSTR __fastcall get_SerialNO(void)
  {
    return GetDefaultInterface()->get_SerialNO();
  }

  float __fastcall get_Lv(void)
  {
    return GetDefaultInterface()->get_Lv();
  }

  float __fastcall get_ud(void)
  {
    return GetDefaultInterface()->get_ud();
  }

  float __fastcall get_vd(void)
  {
    return GetDefaultInterface()->get_vd();
  }

  long __fastcall get_T(void)
  {
    return GetDefaultInterface()->get_T();
  }

  float __fastcall get_dEUser(void)
  {
    return GetDefaultInterface()->get_dEUser();
  }

  float __fastcall get_FlckrFMA(void)
  {
    return GetDefaultInterface()->get_FlckrFMA();
  }

  float __fastcall get_sy(void)
  {
    return GetDefaultInterface()->get_sy();
  }

  float __fastcall get_sx(void)
  {
    return GetDefaultInterface()->get_sx();
  }

  float __fastcall get_duv(void)
  {
    return GetDefaultInterface()->get_duv();
  }

  float __fastcall get_usUser(void)
  {
    return GetDefaultInterface()->get_usUser();
  }

  float __fastcall get_vsUser(void)
  {
    return GetDefaultInterface()->get_vsUser();
  }

  float __fastcall get_LsUser(void)
  {
    return GetDefaultInterface()->get_LsUser();
  }

  float __fastcall get_LvfL(void)
  {
    return GetDefaultInterface()->get_LvfL();
  }

  float __fastcall get_R(void)
  {
    return GetDefaultInterface()->get_R();
  }

  float __fastcall get_G(void)
  {
    return GetDefaultInterface()->get_G();
  }

  float __fastcall get_B(void)
  {
    return GetDefaultInterface()->get_B();
  }

  long __fastcall get_RD(void)
  {
    return GetDefaultInterface()->get_RD();
  }

  long __fastcall get_RAD(void)
  {
    return GetDefaultInterface()->get_RAD();
  }

  long __fastcall get_RFMA(void)
  {
    return GetDefaultInterface()->get_RFMA();
  }

  long __fastcall get_RJEITA(void)
  {
    return GetDefaultInterface()->get_RJEITA();
  }

  float __fastcall GetSpectrum(long Frequency/*[in]*/)
  {
    return GetDefaultInterface()->GetSpectrum(Frequency/*[in]*/);
  }

  __property float X={ read=get_X };
  __property float Y={ read=get_Y };
  __property float Z={ read=get_Z };
  __property float FlckrJEITA={ read=get_FlckrJEITA };
  __property long Number={ read=get_Number };
  __property BSTR SerialNO={ read=get_SerialNO };
  __property float Lv={ read=get_Lv };
  __property float ud={ read=get_ud };
  __property float vd={ read=get_vd };
  __property long T={ read=get_T };
  __property float dEUser={ read=get_dEUser };
  __property float FlckrFMA={ read=get_FlckrFMA };
  __property float sy={ read=get_sy };
  __property float sx={ read=get_sx };
  __property float duv={ read=get_duv };
  __property float usUser={ read=get_usUser };
  __property float vsUser={ read=get_vsUser };
  __property float LsUser={ read=get_LsUser };
  __property float LvfL={ read=get_LvfL };
  __property float R={ read=get_R };
  __property float G={ read=get_G };
  __property float B={ read=get_B };
  __property long RD={ read=get_RD };
  __property long RAD={ read=get_RAD };
  __property long RFMA={ read=get_RFMA };
  __property long RJEITA={ read=get_RJEITA };
  __property BSTR ID={ read=get_ID, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TOutputProbes
// Help String      : OutputProbes Class
// Default Interface: IOutputProbes
// Def. Intf. Object: IOutputProbesPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TOutputProbes : public Oleserver::TOleServer
{
  IOutputProbesPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TOutputProbes(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IOutputProbesPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IOutputProbesPtr intf);


  Ca200srvrlib_tlb::IProbePtr __fastcall get_Item(VARIANT ProbeIndexVal/*[in]*/)
  {
    return GetDefaultInterface()->get_Item(ProbeIndexVal/*[in]*/);
  }

  long __fastcall get_Count(void)
  {
    return GetDefaultInterface()->get_Count();
  }

  Ca200srvrlib_tlb::IProbePtr __fastcall get_ItemOfNumber(long ProbeNumberVal/*[in]*/)
  {
    return GetDefaultInterface()->get_ItemOfNumber(ProbeNumberVal/*[in]*/);
  }

  void __fastcall Add(BSTR ProbeIDVal/*[in]*/)
  {
    GetDefaultInterface()->Add(ProbeIDVal/*[in]*/);
  }

  void __fastcall AddAll(void)
  {
    GetDefaultInterface()->AddAll();
  }

  Ca200srvrlib_tlb::IOutputProbesPtr __fastcall Clone(void)
  {
    return GetDefaultInterface()->Clone();
  }

  void __fastcall RemoveAll(void)
  {
    GetDefaultInterface()->RemoveAll();
  }

  __property Ca200srvrlib_tlb::IProbePtr Item[VARIANT ProbeIndexVal]={ read=get_Item };
  __property long Count={ read=get_Count };
  __property Ca200srvrlib_tlb::IProbePtr ItemOfNumber[long ProbeNumberVal]={ read=get_ItemOfNumber };
};

};     // namespace Ca200srvrlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Ca200srvrlib_tlb;
#endif

#pragma option pop

#endif // CA200SRVRLib_OCXH
