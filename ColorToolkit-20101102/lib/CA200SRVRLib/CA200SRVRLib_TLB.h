// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2010/1/11 ¤U¤È 08:10:38 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\CA-SDK\SDK\CA200Srvr.dll (1)
// LIBID: {81480671-9287-43D4-8A21-F0CB0157077F}
// LCID: 0
// Helpfile: 
// HelpString: CA200Srvr 1.1 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   CA200SRVRLib_TLBH
#define   CA200SRVRLib_TLBH

#pragma option push -b -w-inl

#include <vcl.h>
#define NO_PROMPT_ON_HRCHECK_FAILURE
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {
    class IStrings;
    class IStringsDisp;
} using namespace Stdvcl;
typedef TComInterface < IStrings > IStringsPtr;
typedef TComInterface < IStringsDisp > IStringsDispPtr;

namespace Ca200srvrlib_tlb {

// *********************************************************************//
// HelpString: CA200Srvr 1.1 Type Library
// Version:    1.1
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
    extern __declspec(package) const GUID LIBID_CA200SRVRLib;
    extern __declspec(package) const GUID IID_ICa200;
    extern __declspec(package) const GUID CLSID_Ca200;
    extern __declspec(package) const GUID IID_ICas;
    extern __declspec(package) const GUID IID_ICa;
    extern __declspec(package) const GUID IID_IProbes;
    extern __declspec(package) const GUID IID_IProbe;
    extern __declspec(package) const GUID IID_IOutputProbes;
    extern __declspec(package) const GUID IID_IMemory;
    extern __declspec(package) const GUID CLSID_Cas;
    extern __declspec(package) const GUID DIID__ICaEvents;
    extern __declspec(package) const GUID IID_IProbeInfo;
    extern __declspec(package) const GUID IID_ICaOption;
    extern __declspec(package) const GUID CLSID_Ca;
    extern __declspec(package) const GUID CLSID_Memory;
    extern __declspec(package) const GUID CLSID_Probes;
    extern __declspec(package) const GUID CLSID_Probe;
    extern __declspec(package) const GUID CLSID_OutputProbes;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
    interface DECLSPEC_UUID("{DB87A8F6-FAF3-433A-B7F3-31BB4D759361}")
	ICa200;
    typedef TComInterface < ICa200, &IID_ICa200 > ICa200Ptr;

    interface DECLSPEC_UUID("{5415C7C6-D982-46EE-BA22-FB6DC1AD5DE0}") ICas;
    typedef TComInterface < ICas, &IID_ICas > ICasPtr;

    interface DECLSPEC_UUID("{A930F0DB-F79A-467A-8479-F8369B063B8D}") ICa;
    typedef TComInterface < ICa, &IID_ICa > ICaPtr;

    interface DECLSPEC_UUID("{B455EFE8-1576-481C-BAC6-A1C506BF4E81}")
	IProbes;
    typedef TComInterface < IProbes, &IID_IProbes > IProbesPtr;

    interface DECLSPEC_UUID("{B2FDD51E-CBA7-45CE-AF0A-DD962E46B74F}")
	IProbe;
    typedef TComInterface < IProbe, &IID_IProbe > IProbePtr;

    interface DECLSPEC_UUID("{3EE4760C-B9F3-47B1-953F-F5A2F83FF688}")
	IOutputProbes;
    typedef TComInterface < IOutputProbes,
	&IID_IOutputProbes > IOutputProbesPtr;

    interface DECLSPEC_UUID("{20EA33BB-6914-465A-B98E-8DBD4E386CD0}")
	IMemory;
    typedef TComInterface < IMemory, &IID_IMemory > IMemoryPtr;

    interface DECLSPEC_UUID("{F7663750-5900-45EB-905F-78C5D5378481}")
	_ICaEvents;
    typedef TComInterface < _ICaEvents, &DIID__ICaEvents > _ICaEventsPtr;

    interface DECLSPEC_UUID("{5C542273-19D5-4C56-A12A-A58B1BAAD65E}")
	IProbeInfo;
    typedef TComInterface < IProbeInfo, &IID_IProbeInfo > IProbeInfoPtr;

    interface DECLSPEC_UUID("{3CBE6157-1D53-4CAE-B4B0-33ACC30E6421}")
	ICaOption;
    typedef TComInterface < ICaOption, &IID_ICaOption > ICaOptionPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
    typedef ICa200 Ca200;
    typedef ICa200Ptr Ca200Ptr;
    typedef ICas Cas;
    typedef ICasPtr CasPtr;
    typedef ICa Ca;
    typedef ICaPtr CaPtr;
    typedef IMemory Memory;
    typedef IMemoryPtr MemoryPtr;
    typedef IProbes Probes;
    typedef IProbesPtr ProbesPtr;
    typedef IProbe Probe;
    typedef IProbePtr ProbePtr;
    typedef IOutputProbes OutputProbes;
    typedef IOutputProbesPtr OutputProbesPtr;

#define LIBID_OF_Ca200 (&LIBID_CA200SRVRLib)
#define LIBID_OF_Cas (&LIBID_CA200SRVRLib)
#define LIBID_OF_Ca (&LIBID_CA200SRVRLib)
#define LIBID_OF_Memory (&LIBID_CA200SRVRLib)
#define LIBID_OF_Probes (&LIBID_CA200SRVRLib)
#define LIBID_OF_Probe (&LIBID_CA200SRVRLib)
#define LIBID_OF_OutputProbes (&LIBID_CA200SRVRLib)
// *********************************************************************//
// Interface: ICa200
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB87A8F6-FAF3-433A-B7F3-31BB4D759361}
// *********************************************************************//
    interface ICa200:public IDispatch {
      public:
	// [1] get Cas Object
	virtual HRESULT STDMETHODCALLTYPE get_Cas(Ca200srvrlib_tlb::ICas **
						  CasVal /*[out,retval] */
						  ) = 0;
	// [3] set Configuration
	//CaNumberVal:1..5
	//ConnectStringVal:'1'|'2'|'3'|'4'|'5'|"12"|--|"12345"
	//PortVal:0(=USB0)|1(COM1)..255(COM255)
	//BaudRateVal:300|600|--|38400
	virtual HRESULT STDMETHODCALLTYPE SetConfiguration(long CaNumberVal
							   /*[in] */ ,
							   BSTR
							   ConnecStringVal
							   /*[in] */ ,
							   long PortVal
							   /*[in] */ ,
							   long BaudRateVal
							   /*[in,def,opt] */
							   ) = 0;
	// [4] set Configuration automatically
	//=Setconfiguration 1, "1", 0
	virtual HRESULT STDMETHODCALLTYPE AutoConnect(void) = 0;
	// [2] get SingleCa Object
	virtual HRESULT STDMETHODCALLTYPE get_SingleCa(Ca200srvrlib_tlb::
						       ICa **
						       SingleCaVal
						       /*[out,retval] */ )
	    = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

	 Ca200srvrlib_tlb::ICas * __fastcall get_Cas(void) {
	    Ca200srvrlib_tlb::ICas * CasVal;
	    OLECHECK(this->get_Cas((Ca200srvrlib_tlb::ICas **) & CasVal));
	    return CasVal;
	} Ca200srvrlib_tlb::ICa * __fastcall get_SingleCa(void) {
	    Ca200srvrlib_tlb::ICa * SingleCaVal;
	    OLECHECK(this->
		     get_SingleCa((Ca200srvrlib_tlb::
				   ICa **) & SingleCaVal));
	    return SingleCaVal;
	} __property Ca200srvrlib_tlb::ICas * Cas = { read = get_Cas };
	__property Ca200srvrlib_tlb::ICa * SingleCa = { read =
		get_SingleCa };

#endif				//   __TLB_NO_INTERFACE_WRAPPERS

    };

// *********************************************************************//
// Interface: ICas
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5415C7C6-D982-46EE-BA22-FB6DC1AD5DE0}
// *********************************************************************//
    interface ICas:public IDispatch {
      public:
	// [0] get Ca Object
	//IndexVal:1..5
	virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT IndexVal
						   /*[in] */ ,
						   Ca200srvrlib_tlb::ICa **
						   CaVal /*[out,retval] */
						   ) = 0;
	// [-4]  _NewEnum
	virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN *
						       pVal
						       /*[out,retval] */ )
	    = 0;
	// [1] get Count of Connecting CAs
	virtual HRESULT STDMETHODCALLTYPE get_Count(long *CountVal
						    /*[out,retval] */ ) =
	    0;
	// [6] send Mesuring Command
	virtual HRESULT STDMETHODCALLTYPE SendMsr(void) = 0;
	// [7] receive Measuring Command Result
	virtual HRESULT STDMETHODCALLTYPE ReceiveMsr(void) = 0;
	// [8] get Ca Object
	//CaNumberVal:1..5
	virtual HRESULT STDMETHODCALLTYPE get_ItemOfNumber(long CaNumberVal
							   /*[in] */ ,
							   Ca200srvrlib_tlb::
							   ICa **
							   CaVal
							   /*[out,retval] */
							   ) = 0;
	// [9] set CaID
	//CaNumberVal:1..5
	virtual HRESULT STDMETHODCALLTYPE SetCaID(long CaNumberVal
						  /*[in] */ ,
						  BSTR CaIDVal /*[in] */ )
	    = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

	 Ca200srvrlib_tlb::ICa *
	    __fastcall get_Item(VARIANT IndexVal /*[in] */ ) {
	    Ca200srvrlib_tlb::ICa * CaVal;
	    OLECHECK(this->
		     get_Item(IndexVal,
			      (Ca200srvrlib_tlb::ICa **) & CaVal));
	    return CaVal;
	} LPUNKNOWN __fastcall get__NewEnum(void) {
	    LPUNKNOWN pVal;
	    OLECHECK(this->get__NewEnum((LPUNKNOWN *) & pVal));
	    return pVal;
	}

	long __fastcall get_Count(void) {
	    long CountVal;
	    OLECHECK(this->get_Count((long *) &CountVal));
	    return CountVal;
	}

	Ca200srvrlib_tlb::ICa *
	    __fastcall get_ItemOfNumber(long CaNumberVal /*[in] */ ) {
	    Ca200srvrlib_tlb::ICa * CaVal;
	    OLECHECK(this->
		     get_ItemOfNumber(CaNumberVal,
				      (Ca200srvrlib_tlb::ICa **) & CaVal));
	    return CaVal;
	}


	__property LPUNKNOWN _NewEnum = { read = get__NewEnum };
	__property long Count = { read = get_Count };

#endif				//   __TLB_NO_INTERFACE_WRAPPERS

    };

// *********************************************************************//
// Interface: ICa
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A930F0DB-F79A-467A-8479-F8369B063B8D}
// *********************************************************************//
    interface ICa:public IDispatch {
      public:
	// [1] get Probes Object
	virtual HRESULT STDMETHODCALLTYPE get_Probes(Ca200srvrlib_tlb::
						     IProbes **
						     ProbesVal
						     /*[out,retval] */ ) =
	    0;
	// [2] get OutputProbes Object
	virtual HRESULT STDMETHODCALLTYPE
	    get_OutputProbes(Ca200srvrlib_tlb::IOutputProbes **
			     OutputProbesVal /*[out,retval] */ ) = 0;
	// [3] get Memory Object
	virtual HRESULT STDMETHODCALLTYPE get_Memory(Ca200srvrlib_tlb::
						     IMemory **
						     MemoryVal
						     /*[out,retval] */ ) =
	    0;
	// [4] get/put DisplayProbe
	virtual HRESULT STDMETHODCALLTYPE get_DisplayProbe(BSTR *
							   DisplayProbeVal
							   /*[out,retval] */
							   ) = 0;
	// [4] get/put DisplayProbe
	virtual HRESULT STDMETHODCALLTYPE set_DisplayProbe(BSTR
							   DisplayProbeVal
							   /*[in] */ ) = 0;
	// [5] get SingleProbe Object
	virtual HRESULT STDMETHODCALLTYPE
	    get_SingleProbe(Ca200srvrlib_tlb::IProbe **
			    SingleProbeVal /*[out,retval] */ ) = 0;
	// [6] get/put SyncMode
	//SyncModeVal:0(NTSC)|1(PAL)|2(EXT)|3(UNIV)|40.0..200.0(V.Sync Frequency, INT)
	virtual HRESULT STDMETHODCALLTYPE get_SyncMode(float *SyncModeVal
						       /*[out,retval] */ )
	    = 0;
	// [6] get/put SyncMode
	//SyncModeVal:0(NTSC)|1(PAL)|2(EXT)|3(UNIV)|40.0..200.0(V.Sync Frequency, INT)
	virtual HRESULT STDMETHODCALLTYPE set_SyncMode(float SyncModeVal
						       /*[in] */ ) = 0;
	// [7] get/put DisplayMode
	//DisplayModeVal:0(Lvxy)|1(Tduv)|2(Anlyzr)|3(Anlyzr-G)|4(Anlyzr-R)|5(u'v')|6(FMA Flckr)|7(XYZ)|8(JEITA Llckr)
	virtual HRESULT STDMETHODCALLTYPE get_DisplayMode(long
							  *DisplayModeVal
							  /*[out,retval] */
							  ) = 0;
	// [7] get/put DisplayMode
	//DisplayModeVal:0(Lvxy)|1(Tduv)|2(Anlyzr)|3(Anlyzr-G)|4(Anlyzr-R)|5(u'v')|6(FMA Flckr)|7(XYZ)|8(JEITA Llckr)
	virtual HRESULT STDMETHODCALLTYPE set_DisplayMode(long
							  DisplayModeVal
							  /*[in] */ ) = 0;
	// [8] get/put DisplayDigits
	//DisplayDigitsVal:0(3 digits)|1(4 digits)
	virtual HRESULT STDMETHODCALLTYPE get_DisplayDigits(long
							    *DisplayDigitsVal
							    /*[out,retval] */
							    ) = 0;
	// [8] get/put DisplayDigits
	//DisplayDigitsVal:0(3 digits)|1(4 digits)
	virtual HRESULT STDMETHODCALLTYPE set_DisplayDigits(long
							    DisplayDigitsVal
							    /*[in] */ ) =
	    0;
	// [9] get/put AveragingMode
	//AveragingModeVal:0(SLOW)|1(FAST)|2(AUTO)
	virtual HRESULT STDMETHODCALLTYPE get_AveragingMode(long
							    *AveragingModeVal
							    /*[out,retval] */
							    ) = 0;
	// [9] get/put AveragingMode
	//AveragingModeVal:0(SLOW)|1(FAST)|2(AUTO)
	virtual HRESULT STDMETHODCALLTYPE set_AveragingMode(long
							    AveragingModeVal
							    /*[in] */ ) =
	    0;
	// [10] get/put BrightnessUnit
	//BrightnessUnitVal:0(fL)|1(cd/m2)
	virtual HRESULT STDMETHODCALLTYPE get_BrightnessUnit(long
							     *BrightnessUnitVal
							     /*[out,retval] */
							     ) = 0;
	// [10] get/put BrightnessUnit
	//BrightnessUnitVal:0(fL)|1(cd/m2)
	virtual HRESULT STDMETHODCALLTYPE set_BrightnessUnit(long
							     BrightnessUnitVal
							     /*[in] */ ) =
	    0;
	// [12] get CAType
	virtual HRESULT STDMETHODCALLTYPE get_CAType(BSTR *
						     CATypeVal
						     /*[out,retval] */ ) =
	    0;
	// [13] get CAVersion
	virtual HRESULT STDMETHODCALLTYPE get_CAVersion(BSTR *
							CAVersionVal
							/*[out,retval] */ )
	    = 0;
	// [14] get CA Number
	virtual HRESULT STDMETHODCALLTYPE get_Number(long *NumberVal
						     /*[out,retval] */ ) =
	    0;
	// [15] get PortID
	virtual HRESULT STDMETHODCALLTYPE get_PortID(BSTR *
						     PortIDVal
						     /*[out,retval] */ ) =
	    0;
	// [16] get/put CAID
	virtual HRESULT STDMETHODCALLTYPE get_ID(BSTR *
						 CaIDVal /*[out,retval] */
						 ) = 0;
	// [16] get/put CAID
	virtual HRESULT STDMETHODCALLTYPE set_ID(BSTR CaIDVal /*[in] */ ) =
	    0;
	// [17] perform Zero Calibration
	virtual HRESULT STDMETHODCALLTYPE CalZero(void) = 0;
	// [18] perform Measurement
	virtual HRESULT STDMETHODCALLTYPE Measure(long newVal
						  /*[in,def,opt] */ ) = 0;
	// [19] set AnalyzerCalMode
	virtual HRESULT STDMETHODCALLTYPE SetAnalyzerCalMode(void) = 0;
	// [20] Enter
	virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0;
	// [21] set AnalogRange
	//Range1Val,Range2Val:(2 digits)
	virtual HRESULT STDMETHODCALLTYPE SetAnalogRange(float Range1Val
							 /*[in] */ ,
							 float Range2Val
							 /*[in] */ ) = 0;
	// [24] set PWROnStatus
	virtual HRESULT STDMETHODCALLTYPE SetPWROnStatus(void) = 0;
	// [34] get/put CalStandard
	//CalStandardVal:1(Minolta 6500K)|2(Minolta 9300K)
	virtual HRESULT STDMETHODCALLTYPE get_CalStandard(long
							  *CalStandardVal
							  /*[out,retval] */
							  ) = 0;
	// [34] get/put CalStandard
	//CalStandardVal:1(Minolta 6500K)|2(Minolta 9300K)
	virtual HRESULT STDMETHODCALLTYPE set_CalStandard(long
							  CalStandardVal
							  /*[in] */ ) = 0;
	// [35] reset AnalyzerCalMode
	virtual HRESULT STDMETHODCALLTYPE ResetAnalyzerCalMode(void) = 0;
	// [36] set LvxyCalMode
	virtual HRESULT STDMETHODCALLTYPE SetLvxyCalMode(void) = 0;
	// [37] reset LvxyCalMode
	virtual HRESULT STDMETHODCALLTYPE ResetLvxyCalMode(void) = 0;
	// [38] set AnalyzerCalData
	//ColorVal:0(Red)|1(Green)|2(Blue)|3(White)
	virtual HRESULT STDMETHODCALLTYPE SetAnalyzerCalData(long ColorVal)
	    = 0;
	// [39] set DisplayProbe
	//ProbeNumberVal:1..5
	virtual HRESULT STDMETHODCALLTYPE SetDisplayProbe(long
							  ProbeNumberVal) =
	    0;
	// [40] set LvxyCalData
	//ColorVal:0(Red)|1(Green)|2(Blue)|3(White)
	//xVal,yVal:(xVal,yVal > 0., xVal+yVal < 1.0
	virtual HRESULT STDMETHODCALLTYPE SetLvxyCalData(long ColorVal,
							 float XVal,
							 float YVal,
							 float LvVal) = 0;
	// [41] set RemoteMode
	//RemoteModeVal:0(OFF)|1(ON)|2(REMOTE_LOCK)
	virtual HRESULT STDMETHODCALLTYPE set_RemoteMode(long Param1
							 /*[in] */ ) = 0;
	// [42] set FMA AnalogRange
	//RangeVal:(2 digits)
	virtual HRESULT STDMETHODCALLTYPE SetFMAAnalogRange(float RangeVal
							    /*[in] */ ) =
	    0;
	// [43] get AnalogRange
	virtual HRESULT STDMETHODCALLTYPE GetAnalogRange(float *Range1Val
							 /*[out] */ ,
							 float *Range2Val
							 /*[out] */ ) = 0;
	// [44] get FMA AnalogRange
	virtual HRESULT STDMETHODCALLTYPE GetFMAAnalogRange(float *RangeVal
							    /*[out] */ ) =
	    0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

	 Ca200srvrlib_tlb::IProbes * __fastcall get_Probes(void) {
	    Ca200srvrlib_tlb::IProbes * ProbesVal;
	    OLECHECK(this->
		     get_Probes((Ca200srvrlib_tlb::
				 IProbes **) & ProbesVal));
	    return ProbesVal;
	} Ca200srvrlib_tlb::IOutputProbes *
	    __fastcall get_OutputProbes(void) {
	    Ca200srvrlib_tlb::IOutputProbes * OutputProbesVal;
	    OLECHECK(this->
		     get_OutputProbes((Ca200srvrlib_tlb::
				       IOutputProbes **) &
				      OutputProbesVal));
	    return OutputProbesVal;
	}

	Ca200srvrlib_tlb::IMemory * __fastcall get_Memory(void) {
	    Ca200srvrlib_tlb::IMemory * MemoryVal;
	    OLECHECK(this->
		     get_Memory((Ca200srvrlib_tlb::
				 IMemory **) & MemoryVal));
	    return MemoryVal;
	}

	BSTR __fastcall get_DisplayProbe(void) {
	    BSTR DisplayProbeVal = 0;
	    OLECHECK(this->get_DisplayProbe((BSTR *) & DisplayProbeVal));
	    return DisplayProbeVal;
	}

	Ca200srvrlib_tlb::IProbe * __fastcall get_SingleProbe(void) {
	    Ca200srvrlib_tlb::IProbe * SingleProbeVal;
	    OLECHECK(this->
		     get_SingleProbe((Ca200srvrlib_tlb::
				      IProbe **) & SingleProbeVal));
	    return SingleProbeVal;
	}

	float __fastcall get_SyncMode(void) {
	    float SyncModeVal;
	    OLECHECK(this->get_SyncMode((float *) &SyncModeVal));
	    return SyncModeVal;
	}

	long __fastcall get_DisplayMode(void) {
	    long DisplayModeVal;
	    OLECHECK(this->get_DisplayMode((long *) &DisplayModeVal));
	    return DisplayModeVal;
	}

	long __fastcall get_DisplayDigits(void) {
	    long DisplayDigitsVal;
	    OLECHECK(this->get_DisplayDigits((long *) &DisplayDigitsVal));
	    return DisplayDigitsVal;
	}

	long __fastcall get_AveragingMode(void) {
	    long AveragingModeVal;
	    OLECHECK(this->get_AveragingMode((long *) &AveragingModeVal));
	    return AveragingModeVal;
	}

	long __fastcall get_BrightnessUnit(void) {
	    long BrightnessUnitVal;
	    OLECHECK(this->
		     get_BrightnessUnit((long *) &BrightnessUnitVal));
	    return BrightnessUnitVal;
	}

	BSTR __fastcall get_CAType(void) {
	    BSTR CATypeVal = 0;
	    OLECHECK(this->get_CAType((BSTR *) & CATypeVal));
	    return CATypeVal;
	}

	BSTR __fastcall get_CAVersion(void) {
	    BSTR CAVersionVal = 0;
	    OLECHECK(this->get_CAVersion((BSTR *) & CAVersionVal));
	    return CAVersionVal;
	}

	long __fastcall get_Number(void) {
	    long NumberVal;
	    OLECHECK(this->get_Number((long *) &NumberVal));
	    return NumberVal;
	}

	BSTR __fastcall get_PortID(void) {
	    BSTR PortIDVal = 0;
	    OLECHECK(this->get_PortID((BSTR *) & PortIDVal));
	    return PortIDVal;
	}

	BSTR __fastcall get_ID(void) {
	    BSTR CaIDVal = 0;
	    OLECHECK(this->get_ID((BSTR *) & CaIDVal));
	    return CaIDVal;
	}

	long __fastcall get_CalStandard(void) {
	    long CalStandardVal;
	    OLECHECK(this->get_CalStandard((long *) &CalStandardVal));
	    return CalStandardVal;
	}


	__property Ca200srvrlib_tlb::IProbes * Probes = { read =
		get_Probes };
	__property Ca200srvrlib_tlb::IOutputProbes * OutputProbes =
	    { read = get_OutputProbes };
	__property Ca200srvrlib_tlb::IMemory * Memory = { read =
		get_Memory };
	__property BSTR DisplayProbe = { read = get_DisplayProbe };
	__property Ca200srvrlib_tlb::IProbe * SingleProbe = { read =
		get_SingleProbe };
	__property float SyncMode = { read = get_SyncMode, write =
		set_SyncMode };
	__property long DisplayMode = { read = get_DisplayMode, write =
		set_DisplayMode };
	__property long DisplayDigits = { read = get_DisplayDigits, write =
		set_DisplayDigits };
	__property long AveragingMode = { read = get_AveragingMode, write =
		set_AveragingMode };
	__property long BrightnessUnit = { read =
		get_BrightnessUnit, write = set_BrightnessUnit };
	__property BSTR CAType = { read = get_CAType };
	__property BSTR CAVersion = { read = get_CAVersion };
	__property long Number = { read = get_Number };
	__property BSTR PortID = { read = get_PortID };
	__property BSTR ID = { read = get_ID };
	__property long CalStandard = { read = get_CalStandard, write =
		set_CalStandard };
	__property long RemoteMode = { write = set_RemoteMode };

#endif				//   __TLB_NO_INTERFACE_WRAPPERS

    };

// *********************************************************************//
// Interface: IProbes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B455EFE8-1576-481C-BAC6-A1C506BF4E81}
// *********************************************************************//
    interface IProbes:public IDispatch {
      public:
	// [0] get Probe object
	//IndexVal:1..5
	virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT IndexVal
						   /*[in] */ ,
						   Ca200srvrlib_tlb::
						   IProbe **
						   ItemVal
						   /*[out,retval] */ ) = 0;
	// [-4]  _NewEnum
	virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN *
						       pVal
						       /*[out,retval] */ )
	    = 0;
	// [1] get Count
	virtual HRESULT STDMETHODCALLTYPE get_Count(long *CountVal
						    /*[out,retval] */ ) =
	    0;
	// [6] get Probe object
	//ProbeNumber:1..5
	virtual HRESULT STDMETHODCALLTYPE get_ItemOfNumber(long ProbeNumber
							   /*[in] */ ,
							   Ca200srvrlib_tlb::
							   IProbe **
							   ProbeVal
							   /*[out,retval] */
							   ) = 0;
	// [7] set ProbeID
	//ProbeNumberVal:1..5
	virtual HRESULT STDMETHODCALLTYPE SetProbeID(long ProbeNumberVal
						     /*[in] */ ,
						     BSTR ProbeIDVal
						     /*[in] */ ) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

	 Ca200srvrlib_tlb::IProbe *
	    __fastcall get_Item(VARIANT IndexVal /*[in] */ ) {
	    Ca200srvrlib_tlb::IProbe * ItemVal;
	    OLECHECK(this->
		     get_Item(IndexVal,
			      (Ca200srvrlib_tlb::IProbe **) & ItemVal));
	    return ItemVal;
	} LPUNKNOWN __fastcall get__NewEnum(void) {
	    LPUNKNOWN pVal;
	    OLECHECK(this->get__NewEnum((LPUNKNOWN *) & pVal));
	    return pVal;
	}

	long __fastcall get_Count(void) {
	    long CountVal;
	    OLECHECK(this->get_Count((long *) &CountVal));
	    return CountVal;
	}

	Ca200srvrlib_tlb::IProbe *
	    __fastcall get_ItemOfNumber(long ProbeNumber /*[in] */ ) {
	    Ca200srvrlib_tlb::IProbe * ProbeVal;
	    OLECHECK(this->
		     get_ItemOfNumber(ProbeNumber,
				      (Ca200srvrlib_tlb::
				       IProbe **) & ProbeVal));
	    return ProbeVal;
	}


	__property LPUNKNOWN _NewEnum = { read = get__NewEnum };
	__property long Count = { read = get_Count };

#endif				//   __TLB_NO_INTERFACE_WRAPPERS

    };

// *********************************************************************//
// Interface: IProbe
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2FDD51E-CBA7-45CE-AF0A-DD962E46B74F}
// *********************************************************************//
    interface IProbe:public IDispatch {
      public:
	// [1] get X
	virtual HRESULT STDMETHODCALLTYPE get_X(float *XVal
						/*[out,retval] */ ) = 0;
	// [2] get Y
	virtual HRESULT STDMETHODCALLTYPE get_Y(float *YVal
						/*[out,retval] */ ) = 0;
	// [3] get Z
	virtual HRESULT STDMETHODCALLTYPE get_Z(float *ZVal
						/*[out,retval] */ ) = 0;
	// [4] get FlckrJEITA
	virtual HRESULT STDMETHODCALLTYPE get_FlckrJEITA(float
							 *FlckrJEITAVal
							 /*[out,retval] */
							 ) = 0;
	// [5] get Number
	virtual HRESULT STDMETHODCALLTYPE get_Number(long *NumberVal
						     /*[out,retval] */ ) =
	    0;
	// [6] get/put ProbeID
	virtual HRESULT STDMETHODCALLTYPE get_ID(BSTR *
						 ProbeIDVal
						 /*[out,retval] */ ) = 0;
	// [6] get/put ProbeID
	virtual HRESULT STDMETHODCALLTYPE set_ID(BSTR ProbeIDVal /*[in] */
						 ) = 0;
	// [7] get SerialNO
	virtual HRESULT STDMETHODCALLTYPE get_SerialNO(BSTR *
						       SerialNOVal
						       /*[out,retval] */ )
	    = 0;
	// [10] get Lv
	virtual HRESULT STDMETHODCALLTYPE get_Lv(float *LvVal
						 /*[out,retval] */ ) = 0;
	// [11] get ud
	virtual HRESULT STDMETHODCALLTYPE get_ud(float *udVal
						 /*[out,retval] */ ) = 0;
	// [12] get vd
	virtual HRESULT STDMETHODCALLTYPE get_vd(float *vdVal
						 /*[out,retval] */ ) = 0;
	// [13] get T
	virtual HRESULT STDMETHODCALLTYPE get_T(long *TVal
						/*[out,retval] */ ) = 0;
	// [17] get dEUser
	virtual HRESULT STDMETHODCALLTYPE get_dEUser(float *EUserVal
						     /*[out,retval] */ ) =
	    0;
	// [21] get FlckrFMA
	virtual HRESULT STDMETHODCALLTYPE get_FlckrFMA(float *FlckrFMAVal
						       /*[out,retval] */ )
	    = 0;
	// [22] get y
	virtual HRESULT STDMETHODCALLTYPE get_sy(float *syVal
						 /*[out,retval] */ ) = 0;
	// [23] get x
	virtual HRESULT STDMETHODCALLTYPE get_sx(float *sxVal
						 /*[out,retval] */ ) = 0;
	// [24] get duv
	virtual HRESULT STDMETHODCALLTYPE get_duv(float *duvVal
						  /*[out,retval] */ ) = 0;
	// [25] get usUser
	virtual HRESULT STDMETHODCALLTYPE get_usUser(float *usUserVal
						     /*[out,retval] */ ) =
	    0;
	// [26] get vsUser
	virtual HRESULT STDMETHODCALLTYPE get_vsUser(float *vsUserVal
						     /*[out,retval] */ ) =
	    0;
	// [27] get LsUser
	virtual HRESULT STDMETHODCALLTYPE get_LsUser(float *LsUserVal
						     /*[out,retval] */ ) =
	    0;
	// [29] get LvfL
	virtual HRESULT STDMETHODCALLTYPE get_LvfL(float *LvfLVal
						   /*[out,retval] */ ) = 0;
	// [30] get R
	virtual HRESULT STDMETHODCALLTYPE get_R(float *RVal
						/*[out,retval] */ ) = 0;
	// [31] get G
	virtual HRESULT STDMETHODCALLTYPE get_G(float *GVal
						/*[out,retval] */ ) = 0;
	// [32] get B
	virtual HRESULT STDMETHODCALLTYPE get_B(float *BVal
						/*[out,retval] */ ) = 0;
	// [33] get Measurement Result Code
	virtual HRESULT STDMETHODCALLTYPE get_RD(long *RCodeVal
						 /*[out,retval] */ ) = 0;
	// [34] get Anlyzr Mode Measurement Result Code
	virtual HRESULT STDMETHODCALLTYPE get_RAD(long *RCodeVal
						  /*[out,retval] */ ) = 0;
	// [35] get FMA Flcker Measurement Result Code
	virtual HRESULT STDMETHODCALLTYPE get_RFMA(long *RCodeVal
						   /*[out,retval] */ ) = 0;
	// [36] get JEITA Flcker Measurement Result Code
	virtual HRESULT STDMETHODCALLTYPE get_RJEITA(long *RCodeVal
						     /*[out,retval] */ ) =
	    0;
	// [37] GetSpectrum
	//Frequency:6..65
	virtual HRESULT STDMETHODCALLTYPE GetSpectrum(long Frequency
						      /*[in] */ ,
						      float *SpectrumValue
						      /*[out,retval] */ ) =
	    0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

	float __fastcall get_X(void) {
	    float XVal;
	     OLECHECK(this->get_X((float *) &XVal));
	     return XVal;
	} float __fastcall get_Y(void) {
	    float YVal;
	    OLECHECK(this->get_Y((float *) &YVal));
	    return YVal;
	}

	float __fastcall get_Z(void) {
	    float ZVal;
	    OLECHECK(this->get_Z((float *) &ZVal));
	    return ZVal;
	}

	float __fastcall get_FlckrJEITA(void) {
	    float FlckrJEITAVal;
	    OLECHECK(this->get_FlckrJEITA((float *) &FlckrJEITAVal));
	    return FlckrJEITAVal;
	}

	long __fastcall get_Number(void) {
	    long NumberVal;
	    OLECHECK(this->get_Number((long *) &NumberVal));
	    return NumberVal;
	}

	BSTR __fastcall get_ID(void) {
	    BSTR ProbeIDVal = 0;
	    OLECHECK(this->get_ID((BSTR *) & ProbeIDVal));
	    return ProbeIDVal;
	}

	BSTR __fastcall get_SerialNO(void) {
	    BSTR SerialNOVal = 0;
	    OLECHECK(this->get_SerialNO((BSTR *) & SerialNOVal));
	    return SerialNOVal;
	}

	float __fastcall get_Lv(void) {
	    float LvVal;
	    OLECHECK(this->get_Lv((float *) &LvVal));
	    return LvVal;
	}

	float __fastcall get_ud(void) {
	    float udVal;
	    OLECHECK(this->get_ud((float *) &udVal));
	    return udVal;
	}

	float __fastcall get_vd(void) {
	    float vdVal;
	    OLECHECK(this->get_vd((float *) &vdVal));
	    return vdVal;
	}

	long __fastcall get_T(void) {
	    long TVal;
	    OLECHECK(this->get_T((long *) &TVal));
	    return TVal;
	}

	float __fastcall get_dEUser(void) {
	    float EUserVal;
	    OLECHECK(this->get_dEUser((float *) &EUserVal));
	    return EUserVal;
	}

	float __fastcall get_FlckrFMA(void) {
	    float FlckrFMAVal;
	    OLECHECK(this->get_FlckrFMA((float *) &FlckrFMAVal));
	    return FlckrFMAVal;
	}

	float __fastcall get_sy(void) {
	    float syVal;
	    OLECHECK(this->get_sy((float *) &syVal));
	    return syVal;
	}

	float __fastcall get_sx(void) {
	    float sxVal;
	    OLECHECK(this->get_sx((float *) &sxVal));
	    return sxVal;
	}

	float __fastcall get_duv(void) {
	    float duvVal;
	    OLECHECK(this->get_duv((float *) &duvVal));
	    return duvVal;
	}

	float __fastcall get_usUser(void) {
	    float usUserVal;
	    OLECHECK(this->get_usUser((float *) &usUserVal));
	    return usUserVal;
	}

	float __fastcall get_vsUser(void) {
	    float vsUserVal;
	    OLECHECK(this->get_vsUser((float *) &vsUserVal));
	    return vsUserVal;
	}

	float __fastcall get_LsUser(void) {
	    float LsUserVal;
	    OLECHECK(this->get_LsUser((float *) &LsUserVal));
	    return LsUserVal;
	}

	float __fastcall get_LvfL(void) {
	    float LvfLVal;
	    OLECHECK(this->get_LvfL((float *) &LvfLVal));
	    return LvfLVal;
	}

	float __fastcall get_R(void) {
	    float RVal;
	    OLECHECK(this->get_R((float *) &RVal));
	    return RVal;
	}

	float __fastcall get_G(void) {
	    float GVal;
	    OLECHECK(this->get_G((float *) &GVal));
	    return GVal;
	}

	float __fastcall get_B(void) {
	    float BVal;
	    OLECHECK(this->get_B((float *) &BVal));
	    return BVal;
	}

	long __fastcall get_RD(void) {
	    long RCodeVal;
	    OLECHECK(this->get_RD((long *) &RCodeVal));
	    return RCodeVal;
	}

	long __fastcall get_RAD(void) {
	    long RCodeVal;
	    OLECHECK(this->get_RAD((long *) &RCodeVal));
	    return RCodeVal;
	}

	long __fastcall get_RFMA(void) {
	    long RCodeVal;
	    OLECHECK(this->get_RFMA((long *) &RCodeVal));
	    return RCodeVal;
	}

	long __fastcall get_RJEITA(void) {
	    long RCodeVal;
	    OLECHECK(this->get_RJEITA((long *) &RCodeVal));
	    return RCodeVal;
	}

	float __fastcall GetSpectrum(long Frequency /*[in] */ ) {
	    float SpectrumValue;
	    OLECHECK(this->
		     GetSpectrum(Frequency, (float *) &SpectrumValue));
	    return SpectrumValue;
	}


	__property float X = { read = get_X };
	__property float Y = { read = get_Y };
	__property float Z = { read = get_Z };
	__property float FlckrJEITA = { read = get_FlckrJEITA };
	__property long Number = { read = get_Number };
	__property BSTR ID = { read = get_ID };
	__property BSTR SerialNO = { read = get_SerialNO };
	__property float Lv = { read = get_Lv };
	__property float ud = { read = get_ud };
	__property float vd = { read = get_vd };
	__property long T = { read = get_T };
	__property float dEUser = { read = get_dEUser };
	__property float FlckrFMA = { read = get_FlckrFMA };
	__property float sy = { read = get_sy };
	__property float sx = { read = get_sx };
	__property float duv = { read = get_duv };
	__property float usUser = { read = get_usUser };
	__property float vsUser = { read = get_vsUser };
	__property float LsUser = { read = get_LsUser };
	__property float LvfL = { read = get_LvfL };
	__property float R = { read = get_R };
	__property float G = { read = get_G };
	__property float B = { read = get_B };
	__property long RD = { read = get_RD };
	__property long RAD = { read = get_RAD };
	__property long RFMA = { read = get_RFMA };
	__property long RJEITA = { read = get_RJEITA };

#endif				//   __TLB_NO_INTERFACE_WRAPPERS

    };

// *********************************************************************//
// Interface: IOutputProbes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3EE4760C-B9F3-47B1-953F-F5A2F83FF688}
// *********************************************************************//
    interface IOutputProbes:public IDispatch {
      public:
	// [0] get Probe Object
	//ProbeIndexVal:1..5
	virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT ProbeIndexVal
						   /*[in] */ ,
						   Ca200srvrlib_tlb::
						   IProbe **
						   ProbeVal
						   /*[out,retval] */ ) = 0;
	// [-4]  _NewEnum
	virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN *
						       pVal
						       /*[out,retval] */ )
	    = 0;
	// [1] get Count
	virtual HRESULT STDMETHODCALLTYPE get_Count(long *CountVal
						    /*[out,retval] */ ) =
	    0;
	// [5] Add
	virtual HRESULT STDMETHODCALLTYPE Add(BSTR ProbeIDVal /*[in] */ ) =
	    0;
	// [6] get Probe Object
	//ProbeNumberVal:1..5
	virtual HRESULT STDMETHODCALLTYPE get_ItemOfNumber(long
							   ProbeNumberVal
							   /*[in] */ ,
							   Ca200srvrlib_tlb::
							   IProbe **
							   ProbeVal
							   /*[out,retval] */
							   ) = 0;
	// [7] AddAll
	virtual HRESULT STDMETHODCALLTYPE AddAll(void) = 0;
	// [8] Clone
	virtual HRESULT STDMETHODCALLTYPE Clone(Ca200srvrlib_tlb::
						IOutputProbes **
						CloneVal /*[out,retval] */
						) = 0;
	// [9] RemoveAll
	virtual HRESULT STDMETHODCALLTYPE RemoveAll(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

	 Ca200srvrlib_tlb::IProbe *
	    __fastcall get_Item(VARIANT ProbeIndexVal /*[in] */ ) {
	    Ca200srvrlib_tlb::IProbe * ProbeVal;
	    OLECHECK(this->
		     get_Item(ProbeIndexVal,
			      (Ca200srvrlib_tlb::IProbe **) & ProbeVal));
	    return ProbeVal;
	} LPUNKNOWN __fastcall get__NewEnum(void) {
	    LPUNKNOWN pVal;
	    OLECHECK(this->get__NewEnum((LPUNKNOWN *) & pVal));
	    return pVal;
	}

	long __fastcall get_Count(void) {
	    long CountVal;
	    OLECHECK(this->get_Count((long *) &CountVal));
	    return CountVal;
	}

	Ca200srvrlib_tlb::IProbe *
	    __fastcall get_ItemOfNumber(long ProbeNumberVal /*[in] */ ) {
	    Ca200srvrlib_tlb::IProbe * ProbeVal;
	    OLECHECK(this->
		     get_ItemOfNumber(ProbeNumberVal,
				      (Ca200srvrlib_tlb::
				       IProbe **) & ProbeVal));
	    return ProbeVal;
	}

	Ca200srvrlib_tlb::IOutputProbes * __fastcall Clone(void) {
	    Ca200srvrlib_tlb::IOutputProbes * CloneVal;
	    OLECHECK(this->
		     Clone((Ca200srvrlib_tlb::
			    IOutputProbes **) & CloneVal));
	    return CloneVal;
	}


	__property LPUNKNOWN _NewEnum = { read = get__NewEnum };
	__property long Count = { read = get_Count };

#endif				//   __TLB_NO_INTERFACE_WRAPPERS

    };

// *********************************************************************//
// Interface: IMemory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {20EA33BB-6914-465A-B98E-8DBD4E386CD0}
// *********************************************************************//
    interface IMemory:public IDispatch {
      public:
	// [1] get/put Channel
	//ChannelNOVal:0..99
	virtual HRESULT STDMETHODCALLTYPE get_ChannelNO(long *ChannelNOVal
							/*[out,retval] */ )
	    = 0;
	// [1] get/put Channel
	//ChannelNOVal:0..99
	virtual HRESULT STDMETHODCALLTYPE set_ChannelNO(long ChannelNOVal
							/*[in] */ ) = 0;
	// [2] get/put Channel
	//ChannelIDVal:(<= 10 characters)
	virtual HRESULT STDMETHODCALLTYPE get_ChannelID(BSTR *
							ChannelIDVal
							/*[out,retval] */ )
	    = 0;
	// [2] get/put Channel
	//ChannelIDVal:(<= 10 characters)
	virtual HRESULT STDMETHODCALLTYPE set_ChannelID(BSTR ChannelIDVal
							/*[in] */ ) = 0;
	// [3] get ReferenceColor
	virtual HRESULT STDMETHODCALLTYPE GetReferenceColor(BSTR ProbeIDVal
							    /*[in] */ ,
							    float *XVal
							    /*[out] */ ,
							    float *YVal
							    /*[out] */ ,
							    float *LvVal
							    /*[out] */ ) =
	    0;
	// [4] set ChannelID
	//ChannelIDVal:(<= 10 characters)
	virtual HRESULT STDMETHODCALLTYPE SetChannelID(BSTR ChannelIDVal
						       /*[in] */ ) = 0;
	// [5] get MemoryStatus
	//ProbeNOVal:1..5
	virtual HRESULT STDMETHODCALLTYPE GetMemoryStatus(long ProbeNOVal
							  /*[in] */ ,
							  long
							  *CalProbeSNOVal
							  /*[out] */ ,
							  long
							  *RefProbeSNOVal
							  /*[out] */ ,
							  long *CalModeVal
							  /*[out] */ ) = 0;
	// [6] check CalData
	//ProbeNOVal:1..5
	virtual HRESULT STDMETHODCALLTYPE CheckCalData(long ProbeNOVal
						       /*[in] */ ,
						       BSTR FileNameVal
						       /*[in] */ ,
						       long *ResultVal
						       /*[out,retval] */ )
	    = 0;
	// [7] copy to File
	//ProbeNOVal:1..5
	virtual HRESULT STDMETHODCALLTYPE CopyToFile(long ProbeNOVal
						     /*[in] */ ,
						     BSTR FileNameVal
						     /*[in] */ ) = 0;
	// [8] copy from File
	//ProbeNOVal:1..5
	virtual HRESULT STDMETHODCALLTYPE CopyFromFile(long ProbeNOVal
						       /*[in] */ ,
						       BSTR FileNameVal
						       /*[in] */ ) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

	long __fastcall get_ChannelNO(void) {
	    long ChannelNOVal;
	     OLECHECK(this->get_ChannelNO((long *) &ChannelNOVal));
	     return ChannelNOVal;
	} BSTR __fastcall get_ChannelID(void) {
	    BSTR ChannelIDVal = 0;
	    OLECHECK(this->get_ChannelID((BSTR *) & ChannelIDVal));
	    return ChannelIDVal;
	}

	long __fastcall CheckCalData(long ProbeNOVal /*[in] */ ,
				     BSTR FileNameVal /*[in] */ ) {
	    long ResultVal;
	    OLECHECK(this->
		     CheckCalData(ProbeNOVal, FileNameVal,
				  (long *) &ResultVal));
	    return ResultVal;
	}


	__property long ChannelNO = { read = get_ChannelNO, write =
		set_ChannelNO };
	__property BSTR ChannelID = { read = get_ChannelID };

#endif				//   __TLB_NO_INTERFACE_WRAPPERS

    };

// *********************************************************************//
// Interface: _ICaEvents
// Flags:     (4096) Dispatchable
// GUID:      {F7663750-5900-45EB-905F-78C5D5378481}
// *********************************************************************//
    interface _ICaEvents:public TDispWrapper < IDispatch > {
	void __fastcall ExeCalZero() {
	    _TDispID _dispid( /* ExeCalZero */ DISPID(1));
	     OleProcedure(_dispid);
    }};
// *********************************************************************//
// Interface: IProbeInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5C542273-19D5-4C56-A12A-A58B1BAAD65E}
// *********************************************************************//
    interface IProbeInfo:public IDispatch {
      public:
	// [1] get ProbeTypeName
	virtual HRESULT STDMETHODCALLTYPE get_TypeName(BSTR *
						       pVal
						       /*[out,retval] */ )
	    = 0;
	// [2] get ProbeTypeNO
	virtual HRESULT STDMETHODCALLTYPE get_TypeNO(long *pVal
						     /*[out,retval] */ ) =
	    0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

	BSTR __fastcall get_TypeName(void) {
	    BSTR pVal = 0;
	     OLECHECK(this->get_TypeName((BSTR *) & pVal));
	     return pVal;
	} long __fastcall get_TypeNO(void) {
	    long pVal;
	    OLECHECK(this->get_TypeNO((long *) &pVal));
	    return pVal;
	}


	__property BSTR TypeName = { read = get_TypeName };
	__property long TypeNO = { read = get_TypeNO };

#endif				//   __TLB_NO_INTERFACE_WRAPPERS

    };

// *********************************************************************//
// Interface: ICaOption
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3CBE6157-1D53-4CAE-B4B0-33ACC30E6421}
// *********************************************************************//
    interface ICaOption:public IDispatch {
      public:
	// [1] Ò¿¯Ä?Command
	virtual HRESULT STDMETHODCALLTYPE Command(BSTR CommandVal /*[in] */
						  ,
						  BSTR *
						  ResponseVal
						  /*[out,retval] */ ) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

	BSTR __fastcall Command(BSTR CommandVal /*[in] */ ) {
	    BSTR ResponseVal = 0;
	     OLECHECK(this->Command(CommandVal, (BSTR *) & ResponseVal));
	     return ResponseVal;
	}
#endif				//   __TLB_NO_INTERFACE_WRAPPERS
    };

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMICa200
// Interface: ICa200
// *********************************************************************//
    template < class T /* ICa200 */  >
  class TCOMICa200T:public TComInterface < ICa200 >,
	public TComInterfaceBase < IUnknown > {
      public:
	TCOMICa200T() {
	}
      TCOMICa200T(ICa200 * intf, bool addRef = false):TComInterface < ICa200 > (intf,
				  addRef)
	{
	}
      TCOMICa200T(const TCOMICa200T & src):TComInterface < ICa200 >
	    (src) {
	}
	TCOMICa200T & operator=(const TCOMICa200T & src) {
	    Bind(src, true);
	    return *this;
	}

	HRESULT __fastcall get_Cas(Ca200srvrlib_tlb::ICas **
				   CasVal /*[out,retval] */ );
	HRESULT __fastcall get_Cas(Ca200srvrlib_tlb::ICasPtr *
				   CasVal /*[out,retval] */ );
	Ca200srvrlib_tlb::ICasPtr __fastcall get_Cas(void);
	HRESULT __fastcall SetConfiguration(long CaNumberVal /*[in] */ ,
					    BSTR ConnecStringVal /*[in] */
					    ,
					    long PortVal /*[in] */ ,
					    long BaudRateVal
					    /*[in,def,opt] */ );
	HRESULT __fastcall AutoConnect(void);
	HRESULT __fastcall get_SingleCa(Ca200srvrlib_tlb::ICa **
					SingleCaVal /*[out,retval] */ );
	HRESULT __fastcall get_SingleCa(Ca200srvrlib_tlb::ICaPtr *
					SingleCaVal /*[out,retval] */ );
	Ca200srvrlib_tlb::ICaPtr __fastcall get_SingleCa(void);

	__property Ca200srvrlib_tlb::ICasPtr Cas = { read = get_Cas };
	__property Ca200srvrlib_tlb::ICaPtr SingleCa = { read =
		get_SingleCa };
    };
    typedef TCOMICa200T < ICa200 > TCOMICa200;

// *********************************************************************//
// DispIntf:  ICa200
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB87A8F6-FAF3-433A-B7F3-31BB4D759361}
// *********************************************************************//
  template < class T > class ICa200DispT:public TAutoDriver < ICa200 > {
      public:
	ICa200DispT() {
	}

	ICa200DispT(ICa200 * pintf) {
	    TAutoDriver < ICa200 >::Bind(pintf, false);
	}

	ICa200DispT(ICa200Ptr pintf) {
	    TAutoDriver < ICa200 >::Bind(pintf, true);
	}

	ICa200DispT & operator=(ICa200 * pintf) {
	    TAutoDriver < ICa200 >::Bind(pintf, false);
	    return *this;
	}

	ICa200DispT & operator=(ICa200Ptr pintf) {
	    TAutoDriver < ICa200 >::Bind(pintf, true);
	    return *this;
	}

	HRESULT BindDefault() {
	    return OLECHECK(Bind(CLSID_Ca200));
	}

	HRESULT BindRunning() {
	    return BindToActive(CLSID_Ca200);
	}

	HRESULT __fastcall get_Cas(Ca200srvrlib_tlb::ICas **
				   CasVal /*[out,retval] */ );
	Ca200srvrlib_tlb::ICas * __fastcall get_Cas(void);
	HRESULT __fastcall SetConfiguration(long CaNumberVal /*[in] */ , BSTR ConnecStringVal	/*[in] */
					    , long PortVal /*[in] */ ,
					    long BaudRateVal
					    /*[in,def,opt] */ );
	HRESULT __fastcall AutoConnect();
	HRESULT __fastcall get_SingleCa(Ca200srvrlib_tlb::ICa **
					SingleCaVal /*[out,retval] */ );
	Ca200srvrlib_tlb::ICa * __fastcall get_SingleCa(void);

	__property Ca200srvrlib_tlb::ICas * Cas = { read = get_Cas };
	__property Ca200srvrlib_tlb::ICa * SingleCa = { read =
		get_SingleCa };
    };
    typedef ICa200DispT < ICa200 > ICa200Disp;

// *********************************************************************//
// SmartIntf: TCOMICas
// Interface: ICas
// *********************************************************************//
    template < class T /* ICas */  >
  class TCOMICasT:public TComInterface < ICas >,
	public TComInterfaceBase < IUnknown > {
      public:
	TCOMICasT() {
	}
      TCOMICasT(ICas * intf, bool addRef = false):TComInterface < ICas > (intf,
				addRef)
	{
	}
	TCOMICasT(const TCOMICasT & src):TComInterface < ICas > (src) {
	}
	TCOMICasT & operator=(const TCOMICasT & src) {
	    Bind(src, true);
	    return *this;
	}

	HRESULT __fastcall get_Item(VARIANT IndexVal /*[in] */ ,
				    Ca200srvrlib_tlb::ICa **
				    CaVal /*[out,retval] */ );
	Ca200srvrlib_tlb::ICa *
	    __fastcall get_Item(VARIANT IndexVal /*[in] */ );
	HRESULT __fastcall get__NewEnum(LPUNKNOWN *
					pVal /*[out,retval] */ );
	LPUNKNOWN __fastcall get__NewEnum(void);
	HRESULT __fastcall get_Count(long *CountVal /*[out,retval] */ );
	long __fastcall get_Count(void);
	HRESULT __fastcall SendMsr(void);
	HRESULT __fastcall ReceiveMsr(void);
	HRESULT __fastcall get_ItemOfNumber(long CaNumberVal /*[in] */ ,
					    Ca200srvrlib_tlb::ICa **
					    CaVal /*[out,retval] */ );
	Ca200srvrlib_tlb::ICa *
	    __fastcall get_ItemOfNumber(long CaNumberVal /*[in] */ );
	HRESULT __fastcall SetCaID(long CaNumberVal /*[in] */ ,
				   BSTR CaIDVal /*[in] */ );

	__property LPUNKNOWN _NewEnum = { read = get__NewEnum };
	__property long Count = { read = get_Count };
    };
    typedef TCOMICasT < ICas > TCOMICas;

// *********************************************************************//
// DispIntf:  ICas
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5415C7C6-D982-46EE-BA22-FB6DC1AD5DE0}
// *********************************************************************//
  template < class T > class ICasDispT:public TAutoDriver < ICas > {
      public:
	ICasDispT() {
	}

	ICasDispT(ICas * pintf) {
	    TAutoDriver < ICas >::Bind(pintf, false);
	}

	ICasDispT(ICasPtr pintf) {
	    TAutoDriver < ICas >::Bind(pintf, true);
	}

	ICasDispT & operator=(ICas * pintf) {
	    TAutoDriver < ICas >::Bind(pintf, false);
	    return *this;
	}

	ICasDispT & operator=(ICasPtr pintf) {
	    TAutoDriver < ICas >::Bind(pintf, true);
	    return *this;
	}

	HRESULT BindDefault() {
	    return OLECHECK(Bind(CLSID_Cas));
	}

	HRESULT BindRunning() {
	    return BindToActive(CLSID_Cas);
	}

	HRESULT __fastcall get_Item(VARIANT IndexVal /*[in] */ ,
				    Ca200srvrlib_tlb::ICa **
				    CaVal /*[out,retval] */ );
	Ca200srvrlib_tlb::ICa *
	    __fastcall get_Item(VARIANT IndexVal /*[in] */ );
	HRESULT __fastcall get__NewEnum(LPUNKNOWN *
					pVal /*[out,retval] */ );
	LPUNKNOWN __fastcall get__NewEnum(void);
	HRESULT __fastcall get_Count(long *CountVal /*[out,retval] */ );
	long __fastcall get_Count(void);
	HRESULT __fastcall SendMsr();
	HRESULT __fastcall ReceiveMsr();
	HRESULT __fastcall get_ItemOfNumber(long CaNumberVal /*[in] */ ,
					    Ca200srvrlib_tlb::ICa **
					    CaVal /*[out,retval] */ );
	Ca200srvrlib_tlb::ICa *
	    __fastcall get_ItemOfNumber(long CaNumberVal /*[in] */ );
	HRESULT __fastcall SetCaID(long CaNumberVal /*[in] */ ,
				   BSTR CaIDVal /*[in] */ );

	__property LPUNKNOWN _NewEnum = { read = get__NewEnum };
	__property long Count = { read = get_Count };
    };
    typedef ICasDispT < ICas > ICasDisp;

// *********************************************************************//
// SmartIntf: TCOMICa
// Interface: ICa
// *********************************************************************//
    template < class T /* ICa */  >
  class TCOMICaT:public TComInterface < ICa >, public TComInterfaceBase < IUnknown >
    {
      public:
	TCOMICaT() {
	}
      TCOMICaT(ICa * intf, bool addRef = false):TComInterface < ICa > (intf,
			       addRef)
	{
	}
	TCOMICaT(const TCOMICaT & src):TComInterface < ICa > (src) {
	}
	TCOMICaT & operator=(const TCOMICaT & src) {
	    Bind(src, true);
	    return *this;
	}

	HRESULT __fastcall get_Probes(Ca200srvrlib_tlb::IProbes **
				      ProbesVal /*[out,retval] */ );
	HRESULT __fastcall get_Probes(Ca200srvrlib_tlb::IProbesPtr *
				      ProbesVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IProbesPtr __fastcall get_Probes(void);
	HRESULT __fastcall get_OutputProbes(Ca200srvrlib_tlb::
					    IOutputProbes **
					    OutputProbesVal
					    /*[out,retval] */ );
	HRESULT __fastcall get_OutputProbes(Ca200srvrlib_tlb::
					    IOutputProbesPtr *
					    OutputProbesVal
					    /*[out,retval] */ );
	Ca200srvrlib_tlb::
	    IOutputProbesPtr __fastcall get_OutputProbes(void);
	HRESULT __fastcall get_Memory(Ca200srvrlib_tlb::IMemory **
				      MemoryVal /*[out,retval] */ );
	HRESULT __fastcall get_Memory(Ca200srvrlib_tlb::IMemoryPtr *
				      MemoryVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IMemoryPtr __fastcall get_Memory(void);
	HRESULT __fastcall get_DisplayProbe(BSTR *
					    DisplayProbeVal
					    /*[out,retval] */ );
	BSTR __fastcall get_DisplayProbe(void);
	HRESULT __fastcall set_DisplayProbe(BSTR DisplayProbeVal /*[in] */
					    );
	HRESULT __fastcall get_SingleProbe(Ca200srvrlib_tlb::IProbe **
					   SingleProbeVal /*[out,retval] */
					   );
	HRESULT __fastcall get_SingleProbe(Ca200srvrlib_tlb::IProbePtr *
					   SingleProbeVal /*[out,retval] */
					   );
	Ca200srvrlib_tlb::IProbePtr __fastcall get_SingleProbe(void);
	HRESULT __fastcall get_SyncMode(float *SyncModeVal
					/*[out,retval] */ );
	float __fastcall get_SyncMode(void);
	HRESULT __fastcall set_SyncMode(float SyncModeVal /*[in] */ );
	HRESULT __fastcall get_DisplayMode(long *DisplayModeVal
					   /*[out,retval] */ );
	long __fastcall get_DisplayMode(void);
	HRESULT __fastcall set_DisplayMode(long DisplayModeVal /*[in] */ );
	HRESULT __fastcall get_DisplayDigits(long *DisplayDigitsVal
					     /*[out,retval] */ );
	long __fastcall get_DisplayDigits(void);
	HRESULT __fastcall set_DisplayDigits(long DisplayDigitsVal
					     /*[in] */ );
	HRESULT __fastcall get_AveragingMode(long *AveragingModeVal
					     /*[out,retval] */ );
	long __fastcall get_AveragingMode(void);
	HRESULT __fastcall set_AveragingMode(long AveragingModeVal
					     /*[in] */ );
	HRESULT __fastcall get_BrightnessUnit(long *BrightnessUnitVal
					      /*[out,retval] */ );
	long __fastcall get_BrightnessUnit(void);
	HRESULT __fastcall set_BrightnessUnit(long BrightnessUnitVal
					      /*[in] */ );
	HRESULT __fastcall get_CAType(BSTR * CATypeVal /*[out,retval] */ );
	BSTR __fastcall get_CAType(void);
	HRESULT __fastcall get_CAVersion(BSTR *
					 CAVersionVal /*[out,retval] */ );
	BSTR __fastcall get_CAVersion(void);
	HRESULT __fastcall get_Number(long *NumberVal /*[out,retval] */ );
	long __fastcall get_Number(void);
	HRESULT __fastcall get_PortID(BSTR * PortIDVal /*[out,retval] */ );
	BSTR __fastcall get_PortID(void);
	HRESULT __fastcall get_ID(BSTR * CaIDVal /*[out,retval] */ );
	BSTR __fastcall get_ID(void);
	HRESULT __fastcall set_ID(BSTR CaIDVal /*[in] */ );
	HRESULT __fastcall CalZero(void);
	HRESULT __fastcall Measure(long newVal /*[in,def,opt] */ );
	HRESULT __fastcall SetAnalyzerCalMode(void);
	HRESULT __fastcall Enter(void);
	HRESULT __fastcall SetAnalogRange(float Range1Val /*[in] */ ,
					  float Range2Val /*[in] */ );
	HRESULT __fastcall SetPWROnStatus(void);
	HRESULT __fastcall get_CalStandard(long *CalStandardVal
					   /*[out,retval] */ );
	long __fastcall get_CalStandard(void);
	HRESULT __fastcall set_CalStandard(long CalStandardVal /*[in] */ );
	HRESULT __fastcall ResetAnalyzerCalMode(void);
	HRESULT __fastcall SetLvxyCalMode(void);
	HRESULT __fastcall ResetLvxyCalMode(void);
	HRESULT __fastcall SetAnalyzerCalData(long ColorVal);
	HRESULT __fastcall SetDisplayProbe(long ProbeNumberVal);
	HRESULT __fastcall SetLvxyCalData(long ColorVal, float XVal,
					  float YVal, float LvVal);
	HRESULT __fastcall set_RemoteMode(long Param1 /*[in] */ );
	HRESULT __fastcall SetFMAAnalogRange(float RangeVal /*[in] */ );
	HRESULT __fastcall GetAnalogRange(float *Range1Val /*[out] */ ,
					  float *Range2Val /*[out] */ );
	HRESULT __fastcall GetFMAAnalogRange(float *RangeVal /*[out] */ );

	__property Ca200srvrlib_tlb::IProbesPtr Probes = { read =
		get_Probes };
	__property Ca200srvrlib_tlb::IOutputProbesPtr OutputProbes =
	    { read = get_OutputProbes };
	__property Ca200srvrlib_tlb::IMemoryPtr Memory = { read =
		get_Memory };
	__property BSTR DisplayProbe = { read = get_DisplayProbe };
	__property Ca200srvrlib_tlb::IProbePtr SingleProbe = { read =
		get_SingleProbe };
	__property float SyncMode = { read = get_SyncMode, write =
		set_SyncMode };
	__property long DisplayMode = { read = get_DisplayMode, write =
		set_DisplayMode };
	__property long DisplayDigits = { read = get_DisplayDigits, write =
		set_DisplayDigits };
	__property long AveragingMode = { read = get_AveragingMode, write =
		set_AveragingMode };
	__property long BrightnessUnit = { read =
		get_BrightnessUnit, write = set_BrightnessUnit };
	__property BSTR CAType = { read = get_CAType };
	__property BSTR CAVersion = { read = get_CAVersion };
	__property long Number = { read = get_Number };
	__property BSTR PortID = { read = get_PortID };
	__property BSTR ID = { read = get_ID };
	__property long CalStandard = { read = get_CalStandard, write =
		set_CalStandard };
	__property long RemoteMode = { write = set_RemoteMode };
    };
    typedef TCOMICaT < ICa > TCOMICa;

// *********************************************************************//
// DispIntf:  ICa
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A930F0DB-F79A-467A-8479-F8369B063B8D}
// *********************************************************************//
  template < class T > class ICaDispT:public TAutoDriver < ICa > {
      public:
	ICaDispT() {
	}

	ICaDispT(ICa * pintf) {
	    TAutoDriver < ICa >::Bind(pintf, false);
	}

	ICaDispT(ICaPtr pintf) {
	    TAutoDriver < ICa >::Bind(pintf, true);
	}

	ICaDispT & operator=(ICa * pintf) {
	    TAutoDriver < ICa >::Bind(pintf, false);
	    return *this;
	}

	ICaDispT & operator=(ICaPtr pintf) {
	    TAutoDriver < ICa >::Bind(pintf, true);
	    return *this;
	}

	HRESULT BindDefault() {
	    return OLECHECK(Bind(CLSID_Ca));
	}

	HRESULT BindRunning() {
	    return BindToActive(CLSID_Ca);
	}

	HRESULT __fastcall get_Probes(Ca200srvrlib_tlb::IProbes **
				      ProbesVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IProbes * __fastcall get_Probes(void);
	HRESULT __fastcall get_OutputProbes(Ca200srvrlib_tlb::
					    IOutputProbes **
					    OutputProbesVal
					    /*[out,retval] */ );
	Ca200srvrlib_tlb::IOutputProbes *
	    __fastcall get_OutputProbes(void);
	HRESULT __fastcall get_Memory(Ca200srvrlib_tlb::IMemory **
				      MemoryVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IMemory * __fastcall get_Memory(void);
	HRESULT __fastcall get_DisplayProbe(BSTR *
					    DisplayProbeVal
					    /*[out,retval] */ );
	BSTR __fastcall get_DisplayProbe(void);
	HRESULT __fastcall set_DisplayProbe(BSTR DisplayProbeVal /*[in] */
					    );
	HRESULT __fastcall get_SingleProbe(Ca200srvrlib_tlb::IProbe **
					   SingleProbeVal /*[out,retval] */
					   );
	Ca200srvrlib_tlb::IProbe * __fastcall get_SingleProbe(void);
	HRESULT __fastcall get_SyncMode(float *SyncModeVal
					/*[out,retval] */ );
	float __fastcall get_SyncMode(void);
	HRESULT __fastcall set_SyncMode(float SyncModeVal /*[in] */ );
	HRESULT __fastcall get_DisplayMode(long *DisplayModeVal
					   /*[out,retval] */ );
	long __fastcall get_DisplayMode(void);
	HRESULT __fastcall set_DisplayMode(long DisplayModeVal /*[in] */ );
	HRESULT __fastcall get_DisplayDigits(long *DisplayDigitsVal
					     /*[out,retval] */ );
	long __fastcall get_DisplayDigits(void);
	HRESULT __fastcall set_DisplayDigits(long DisplayDigitsVal
					     /*[in] */ );
	HRESULT __fastcall get_AveragingMode(long *AveragingModeVal
					     /*[out,retval] */ );
	long __fastcall get_AveragingMode(void);
	HRESULT __fastcall set_AveragingMode(long AveragingModeVal
					     /*[in] */ );
	HRESULT __fastcall get_BrightnessUnit(long *BrightnessUnitVal
					      /*[out,retval] */ );
	long __fastcall get_BrightnessUnit(void);
	HRESULT __fastcall set_BrightnessUnit(long BrightnessUnitVal
					      /*[in] */ );
	HRESULT __fastcall get_CAType(BSTR * CATypeVal /*[out,retval] */ );
	BSTR __fastcall get_CAType(void);
	HRESULT __fastcall get_CAVersion(BSTR *
					 CAVersionVal /*[out,retval] */ );
	BSTR __fastcall get_CAVersion(void);
	HRESULT __fastcall get_Number(long *NumberVal /*[out,retval] */ );
	long __fastcall get_Number(void);
	HRESULT __fastcall get_PortID(BSTR * PortIDVal /*[out,retval] */ );
	BSTR __fastcall get_PortID(void);
	HRESULT __fastcall get_ID(BSTR * CaIDVal /*[out,retval] */ );
	BSTR __fastcall get_ID(void);
	HRESULT __fastcall set_ID(BSTR CaIDVal /*[in] */ );
	HRESULT __fastcall CalZero();
	HRESULT __fastcall Measure(long newVal /*[in,def,opt] */ );
	HRESULT __fastcall SetAnalyzerCalMode();
	HRESULT __fastcall Enter();
	HRESULT __fastcall SetAnalogRange(float Range1Val /*[in] */ ,
					  float Range2Val /*[in] */ );
	HRESULT __fastcall SetPWROnStatus();
	HRESULT __fastcall get_CalStandard(long *CalStandardVal
					   /*[out,retval] */ );
	long __fastcall get_CalStandard(void);
	HRESULT __fastcall set_CalStandard(long CalStandardVal /*[in] */ );
	HRESULT __fastcall ResetAnalyzerCalMode();
	HRESULT __fastcall SetLvxyCalMode();
	HRESULT __fastcall ResetLvxyCalMode();
	HRESULT __fastcall SetAnalyzerCalData(long ColorVal);
	HRESULT __fastcall SetDisplayProbe(long ProbeNumberVal);
	HRESULT __fastcall SetLvxyCalData(long ColorVal, float XVal,
					  float YVal, float LvVal);
	HRESULT __fastcall set_RemoteMode(long Param1 /*[in] */ );
	HRESULT __fastcall SetFMAAnalogRange(float RangeVal /*[in] */ );
	HRESULT __fastcall GetAnalogRange(float *Range1Val /*[out] */ ,
					  float *Range2Val /*[out] */ );
	HRESULT __fastcall GetFMAAnalogRange(float *RangeVal /*[out] */ );

	__property Ca200srvrlib_tlb::IProbes * Probes = { read =
		get_Probes };
	__property Ca200srvrlib_tlb::IOutputProbes * OutputProbes =
	    { read = get_OutputProbes };
	__property Ca200srvrlib_tlb::IMemory * Memory = { read =
		get_Memory };
	__property BSTR DisplayProbe = { read = get_DisplayProbe };
	__property Ca200srvrlib_tlb::IProbe * SingleProbe = { read =
		get_SingleProbe };
	__property float SyncMode = { read = get_SyncMode, write =
		set_SyncMode };
	__property long DisplayMode = { read = get_DisplayMode, write =
		set_DisplayMode };
	__property long DisplayDigits = { read = get_DisplayDigits, write =
		set_DisplayDigits };
	__property long AveragingMode = { read = get_AveragingMode, write =
		set_AveragingMode };
	__property long BrightnessUnit = { read =
		get_BrightnessUnit, write = set_BrightnessUnit };
	__property BSTR CAType = { read = get_CAType };
	__property BSTR CAVersion = { read = get_CAVersion };
	__property long Number = { read = get_Number };
	__property BSTR PortID = { read = get_PortID };
	__property BSTR ID = { read = get_ID };
	__property long CalStandard = { read = get_CalStandard, write =
		set_CalStandard };
	__property long RemoteMode = { write = set_RemoteMode };
    };
    typedef ICaDispT < ICa > ICaDisp;

// *********************************************************************//
// SmartIntf: TCOMIProbes
// Interface: IProbes
// *********************************************************************//
    template < class T /* IProbes */  >
  class TCOMIProbesT:public TComInterface < IProbes >,
	public TComInterfaceBase < IUnknown > {
      public:
	TCOMIProbesT() {
	}
      TCOMIProbesT(IProbes * intf, bool addRef = false):TComInterface < IProbes > (intf,
				   addRef)
	{
	}
	TCOMIProbesT(const TCOMIProbesT & src):TComInterface < IProbes >
	    (src) {
	}
	TCOMIProbesT & operator=(const TCOMIProbesT & src) {
	    Bind(src, true);
	    return *this;
	}

	HRESULT __fastcall get_Item(VARIANT IndexVal /*[in] */ ,
				    Ca200srvrlib_tlb::IProbe **
				    ItemVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IProbe *
	    __fastcall get_Item(VARIANT IndexVal /*[in] */ );
	HRESULT __fastcall get__NewEnum(LPUNKNOWN *
					pVal /*[out,retval] */ );
	LPUNKNOWN __fastcall get__NewEnum(void);
	HRESULT __fastcall get_Count(long *CountVal /*[out,retval] */ );
	long __fastcall get_Count(void);
	HRESULT __fastcall get_ItemOfNumber(long ProbeNumber /*[in] */ ,
					    Ca200srvrlib_tlb::IProbe **
					    ProbeVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IProbe *
	    __fastcall get_ItemOfNumber(long ProbeNumber /*[in] */ );
	HRESULT __fastcall SetProbeID(long ProbeNumberVal /*[in] */ ,
				      BSTR ProbeIDVal /*[in] */ );

	__property LPUNKNOWN _NewEnum = { read = get__NewEnum };
	__property long Count = { read = get_Count };
    };
    typedef TCOMIProbesT < IProbes > TCOMIProbes;

// *********************************************************************//
// DispIntf:  IProbes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B455EFE8-1576-481C-BAC6-A1C506BF4E81}
// *********************************************************************//
  template < class T > class IProbesDispT:public TAutoDriver < IProbes >
    {
      public:
	IProbesDispT() {
	}

	IProbesDispT(IProbes * pintf) {
	    TAutoDriver < IProbes >::Bind(pintf, false);
	}

	IProbesDispT(IProbesPtr pintf) {
	    TAutoDriver < IProbes >::Bind(pintf, true);
	}

	IProbesDispT & operator=(IProbes * pintf) {
	    TAutoDriver < IProbes >::Bind(pintf, false);
	    return *this;
	}

	IProbesDispT & operator=(IProbesPtr pintf) {
	    TAutoDriver < IProbes >::Bind(pintf, true);
	    return *this;
	}

	HRESULT BindDefault() {
	    return OLECHECK(Bind(CLSID_Probes));
	}

	HRESULT BindRunning() {
	    return BindToActive(CLSID_Probes);
	}

	HRESULT __fastcall get_Item(VARIANT IndexVal /*[in] */ ,
				    Ca200srvrlib_tlb::IProbe **
				    ItemVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IProbe *
	    __fastcall get_Item(VARIANT IndexVal /*[in] */ );
	HRESULT __fastcall get__NewEnum(LPUNKNOWN *
					pVal /*[out,retval] */ );
	LPUNKNOWN __fastcall get__NewEnum(void);
	HRESULT __fastcall get_Count(long *CountVal /*[out,retval] */ );
	long __fastcall get_Count(void);
	HRESULT __fastcall get_ItemOfNumber(long ProbeNumber /*[in] */ ,
					    Ca200srvrlib_tlb::IProbe **
					    ProbeVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IProbe *
	    __fastcall get_ItemOfNumber(long ProbeNumber /*[in] */ );
	HRESULT __fastcall SetProbeID(long ProbeNumberVal /*[in] */ ,
				      BSTR ProbeIDVal /*[in] */ );

	__property LPUNKNOWN _NewEnum = { read = get__NewEnum };
	__property long Count = { read = get_Count };
    };
    typedef IProbesDispT < IProbes > IProbesDisp;

// *********************************************************************//
// SmartIntf: TCOMIProbe
// Interface: IProbe
// *********************************************************************//
    template < class T /* IProbe */  >
  class TCOMIProbeT:public TComInterface < IProbe >,
	public TComInterfaceBase < IUnknown > {
      public:
	TCOMIProbeT() {
	}
      TCOMIProbeT(IProbe * intf, bool addRef = false):TComInterface < IProbe > (intf,
				  addRef)
	{
	}
	TCOMIProbeT(const TCOMIProbeT & src):TComInterface < IProbe > (src) {
	}
	TCOMIProbeT & operator=(const TCOMIProbeT & src) {
	    Bind(src, true);
	    return *this;
	}

	HRESULT __fastcall get_X(float *XVal /*[out,retval] */ );
	float __fastcall get_X(void);
	HRESULT __fastcall get_Y(float *YVal /*[out,retval] */ );
	float __fastcall get_Y(void);
	HRESULT __fastcall get_Z(float *ZVal /*[out,retval] */ );
	float __fastcall get_Z(void);
	HRESULT __fastcall get_FlckrJEITA(float *FlckrJEITAVal
					  /*[out,retval] */ );
	float __fastcall get_FlckrJEITA(void);
	HRESULT __fastcall get_Number(long *NumberVal /*[out,retval] */ );
	long __fastcall get_Number(void);
	HRESULT __fastcall get_ID(BSTR * ProbeIDVal /*[out,retval] */ );
	BSTR __fastcall get_ID(void);
	HRESULT __fastcall set_ID(BSTR ProbeIDVal /*[in] */ );
	HRESULT __fastcall get_SerialNO(BSTR *
					SerialNOVal /*[out,retval] */ );
	BSTR __fastcall get_SerialNO(void);
	HRESULT __fastcall get_Lv(float *LvVal /*[out,retval] */ );
	float __fastcall get_Lv(void);
	HRESULT __fastcall get_ud(float *udVal /*[out,retval] */ );
	float __fastcall get_ud(void);
	HRESULT __fastcall get_vd(float *vdVal /*[out,retval] */ );
	float __fastcall get_vd(void);
	HRESULT __fastcall get_T(long *TVal /*[out,retval] */ );
	long __fastcall get_T(void);
	HRESULT __fastcall get_dEUser(float *EUserVal /*[out,retval] */ );
	float __fastcall get_dEUser(void);
	HRESULT __fastcall get_FlckrFMA(float *FlckrFMAVal
					/*[out,retval] */ );
	float __fastcall get_FlckrFMA(void);
	HRESULT __fastcall get_sy(float *syVal /*[out,retval] */ );
	float __fastcall get_sy(void);
	HRESULT __fastcall get_sx(float *sxVal /*[out,retval] */ );
	float __fastcall get_sx(void);
	HRESULT __fastcall get_duv(float *duvVal /*[out,retval] */ );
	float __fastcall get_duv(void);
	HRESULT __fastcall get_usUser(float *usUserVal /*[out,retval] */ );
	float __fastcall get_usUser(void);
	HRESULT __fastcall get_vsUser(float *vsUserVal /*[out,retval] */ );
	float __fastcall get_vsUser(void);
	HRESULT __fastcall get_LsUser(float *LsUserVal /*[out,retval] */ );
	float __fastcall get_LsUser(void);
	HRESULT __fastcall get_LvfL(float *LvfLVal /*[out,retval] */ );
	float __fastcall get_LvfL(void);
	HRESULT __fastcall get_R(float *RVal /*[out,retval] */ );
	float __fastcall get_R(void);
	HRESULT __fastcall get_G(float *GVal /*[out,retval] */ );
	float __fastcall get_G(void);
	HRESULT __fastcall get_B(float *BVal /*[out,retval] */ );
	float __fastcall get_B(void);
	HRESULT __fastcall get_RD(long *RCodeVal /*[out,retval] */ );
	long __fastcall get_RD(void);
	HRESULT __fastcall get_RAD(long *RCodeVal /*[out,retval] */ );
	long __fastcall get_RAD(void);
	HRESULT __fastcall get_RFMA(long *RCodeVal /*[out,retval] */ );
	long __fastcall get_RFMA(void);
	HRESULT __fastcall get_RJEITA(long *RCodeVal /*[out,retval] */ );
	long __fastcall get_RJEITA(void);
	HRESULT __fastcall GetSpectrum(long Frequency /*[in] */ ,
				       float *SpectrumValue
				       /*[out,retval] */ );
	float __fastcall GetSpectrum(long Frequency /*[in] */ );

	__property float X = { read = get_X };
	__property float Y = { read = get_Y };
	__property float Z = { read = get_Z };
	__property float FlckrJEITA = { read = get_FlckrJEITA };
	__property long Number = { read = get_Number };
	__property BSTR ID = { read = get_ID };
	__property BSTR SerialNO = { read = get_SerialNO };
	__property float Lv = { read = get_Lv };
	__property float ud = { read = get_ud };
	__property float vd = { read = get_vd };
	__property long T = { read = get_T };
	__property float dEUser = { read = get_dEUser };
	__property float FlckrFMA = { read = get_FlckrFMA };
	__property float sy = { read = get_sy };
	__property float sx = { read = get_sx };
	__property float duv = { read = get_duv };
	__property float usUser = { read = get_usUser };
	__property float vsUser = { read = get_vsUser };
	__property float LsUser = { read = get_LsUser };
	__property float LvfL = { read = get_LvfL };
	__property float R = { read = get_R };
	__property float G = { read = get_G };
	__property float B = { read = get_B };
	__property long RD = { read = get_RD };
	__property long RAD = { read = get_RAD };
	__property long RFMA = { read = get_RFMA };
	__property long RJEITA = { read = get_RJEITA };
    };
    typedef TCOMIProbeT < IProbe > TCOMIProbe;

// *********************************************************************//
// DispIntf:  IProbe
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2FDD51E-CBA7-45CE-AF0A-DD962E46B74F}
// *********************************************************************//
  template < class T > class IProbeDispT:public TAutoDriver < IProbe > {
      public:
	IProbeDispT() {
	}

	IProbeDispT(IProbe * pintf) {
	    TAutoDriver < IProbe >::Bind(pintf, false);
	}

	IProbeDispT(IProbePtr pintf) {
	    TAutoDriver < IProbe >::Bind(pintf, true);
	}

	IProbeDispT & operator=(IProbe * pintf) {
	    TAutoDriver < IProbe >::Bind(pintf, false);
	    return *this;
	}

	IProbeDispT & operator=(IProbePtr pintf) {
	    TAutoDriver < IProbe >::Bind(pintf, true);
	    return *this;
	}

	HRESULT BindDefault() {
	    return OLECHECK(Bind(CLSID_Probe));
	}

	HRESULT BindRunning() {
	    return BindToActive(CLSID_Probe);
	}

	HRESULT __fastcall get_X(float *XVal /*[out,retval] */ );
	float __fastcall get_X(void);
	HRESULT __fastcall get_Y(float *YVal /*[out,retval] */ );
	float __fastcall get_Y(void);
	HRESULT __fastcall get_Z(float *ZVal /*[out,retval] */ );
	float __fastcall get_Z(void);
	HRESULT __fastcall get_FlckrJEITA(float *FlckrJEITAVal
					  /*[out,retval] */ );
	float __fastcall get_FlckrJEITA(void);
	HRESULT __fastcall get_Number(long *NumberVal /*[out,retval] */ );
	long __fastcall get_Number(void);
	HRESULT __fastcall get_ID(BSTR * ProbeIDVal /*[out,retval] */ );
	BSTR __fastcall get_ID(void);
	HRESULT __fastcall set_ID(BSTR ProbeIDVal /*[in] */ );
	HRESULT __fastcall get_SerialNO(BSTR *
					SerialNOVal /*[out,retval] */ );
	BSTR __fastcall get_SerialNO(void);
	HRESULT __fastcall get_Lv(float *LvVal /*[out,retval] */ );
	float __fastcall get_Lv(void);
	HRESULT __fastcall get_ud(float *udVal /*[out,retval] */ );
	float __fastcall get_ud(void);
	HRESULT __fastcall get_vd(float *vdVal /*[out,retval] */ );
	float __fastcall get_vd(void);
	HRESULT __fastcall get_T(long *TVal /*[out,retval] */ );
	long __fastcall get_T(void);
	HRESULT __fastcall get_dEUser(float *EUserVal /*[out,retval] */ );
	float __fastcall get_dEUser(void);
	HRESULT __fastcall get_FlckrFMA(float *FlckrFMAVal
					/*[out,retval] */ );
	float __fastcall get_FlckrFMA(void);
	HRESULT __fastcall get_sy(float *syVal /*[out,retval] */ );
	float __fastcall get_sy(void);
	HRESULT __fastcall get_sx(float *sxVal /*[out,retval] */ );
	float __fastcall get_sx(void);
	HRESULT __fastcall get_duv(float *duvVal /*[out,retval] */ );
	float __fastcall get_duv(void);
	HRESULT __fastcall get_usUser(float *usUserVal /*[out,retval] */ );
	float __fastcall get_usUser(void);
	HRESULT __fastcall get_vsUser(float *vsUserVal /*[out,retval] */ );
	float __fastcall get_vsUser(void);
	HRESULT __fastcall get_LsUser(float *LsUserVal /*[out,retval] */ );
	float __fastcall get_LsUser(void);
	HRESULT __fastcall get_LvfL(float *LvfLVal /*[out,retval] */ );
	float __fastcall get_LvfL(void);
	HRESULT __fastcall get_R(float *RVal /*[out,retval] */ );
	float __fastcall get_R(void);
	HRESULT __fastcall get_G(float *GVal /*[out,retval] */ );
	float __fastcall get_G(void);
	HRESULT __fastcall get_B(float *BVal /*[out,retval] */ );
	float __fastcall get_B(void);
	HRESULT __fastcall get_RD(long *RCodeVal /*[out,retval] */ );
	long __fastcall get_RD(void);
	HRESULT __fastcall get_RAD(long *RCodeVal /*[out,retval] */ );
	long __fastcall get_RAD(void);
	HRESULT __fastcall get_RFMA(long *RCodeVal /*[out,retval] */ );
	long __fastcall get_RFMA(void);
	HRESULT __fastcall get_RJEITA(long *RCodeVal /*[out,retval] */ );
	long __fastcall get_RJEITA(void);
	HRESULT __fastcall GetSpectrum(long Frequency /*[in] */ ,
				       float *SpectrumValue
				       /*[out,retval] */ );
	float __fastcall GetSpectrum(long Frequency /*[in] */ );

	__property float X = { read = get_X };
	__property float Y = { read = get_Y };
	__property float Z = { read = get_Z };
	__property float FlckrJEITA = { read = get_FlckrJEITA };
	__property long Number = { read = get_Number };
	__property BSTR ID = { read = get_ID };
	__property BSTR SerialNO = { read = get_SerialNO };
	__property float Lv = { read = get_Lv };
	__property float ud = { read = get_ud };
	__property float vd = { read = get_vd };
	__property long T = { read = get_T };
	__property float dEUser = { read = get_dEUser };
	__property float FlckrFMA = { read = get_FlckrFMA };
	__property float sy = { read = get_sy };
	__property float sx = { read = get_sx };
	__property float duv = { read = get_duv };
	__property float usUser = { read = get_usUser };
	__property float vsUser = { read = get_vsUser };
	__property float LsUser = { read = get_LsUser };
	__property float LvfL = { read = get_LvfL };
	__property float R = { read = get_R };
	__property float G = { read = get_G };
	__property float B = { read = get_B };
	__property long RD = { read = get_RD };
	__property long RAD = { read = get_RAD };
	__property long RFMA = { read = get_RFMA };
	__property long RJEITA = { read = get_RJEITA };
    };
    typedef IProbeDispT < IProbe > IProbeDisp;

// *********************************************************************//
// SmartIntf: TCOMIOutputProbes
// Interface: IOutputProbes
// *********************************************************************//
    template < class T /* IOutputProbes */  >
  class TCOMIOutputProbesT:public TComInterface < IOutputProbes >,
	public TComInterfaceBase < IUnknown > {
      public:
	TCOMIOutputProbesT() {
	}
      TCOMIOutputProbesT(IOutputProbes * intf, bool addRef = false):TComInterface < IOutputProbes > (intf,
					 addRef)
	{
	}
	TCOMIOutputProbesT(const TCOMIOutputProbesT & src):TComInterface <
	    IOutputProbes > (src) {
	}
	TCOMIOutputProbesT & operator=(const TCOMIOutputProbesT & src) {
	    Bind(src, true);
	    return *this;
	}

	HRESULT __fastcall get_Item(VARIANT ProbeIndexVal /*[in] */ ,
				    Ca200srvrlib_tlb::IProbe **
				    ProbeVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IProbe *
	    __fastcall get_Item(VARIANT ProbeIndexVal /*[in] */ );
	HRESULT __fastcall get__NewEnum(LPUNKNOWN *
					pVal /*[out,retval] */ );
	LPUNKNOWN __fastcall get__NewEnum(void);
	HRESULT __fastcall get_Count(long *CountVal /*[out,retval] */ );
	long __fastcall get_Count(void);
	HRESULT __fastcall Add(BSTR ProbeIDVal /*[in] */ );
	HRESULT __fastcall get_ItemOfNumber(long ProbeNumberVal /*[in] */ ,
					    Ca200srvrlib_tlb::IProbe **
					    ProbeVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IProbe *
	    __fastcall get_ItemOfNumber(long ProbeNumberVal /*[in] */ );
	HRESULT __fastcall AddAll(void);
	HRESULT __fastcall Clone(Ca200srvrlib_tlb::IOutputProbes **
				 CloneVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IOutputProbes * __fastcall Clone(void);
	HRESULT __fastcall RemoveAll(void);

	__property LPUNKNOWN _NewEnum = { read = get__NewEnum };
	__property long Count = { read = get_Count };
    };
    typedef TCOMIOutputProbesT < IOutputProbes > TCOMIOutputProbes;

// *********************************************************************//
// DispIntf:  IOutputProbes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3EE4760C-B9F3-47B1-953F-F5A2F83FF688}
// *********************************************************************//
  template < class T > class IOutputProbesDispT:public TAutoDriver < IOutputProbes >
    {
      public:
	IOutputProbesDispT() {
	}

	IOutputProbesDispT(IOutputProbes * pintf) {
	    TAutoDriver < IOutputProbes >::Bind(pintf, false);
	}

	IOutputProbesDispT(IOutputProbesPtr pintf) {
	    TAutoDriver < IOutputProbes >::Bind(pintf, true);
	}

	IOutputProbesDispT & operator=(IOutputProbes * pintf) {
	    TAutoDriver < IOutputProbes >::Bind(pintf, false);
	    return *this;
	}

	IOutputProbesDispT & operator=(IOutputProbesPtr pintf) {
	    TAutoDriver < IOutputProbes >::Bind(pintf, true);
	    return *this;
	}

	HRESULT BindDefault() {
	    return OLECHECK(Bind(CLSID_OutputProbes));
	}

	HRESULT BindRunning() {
	    return BindToActive(CLSID_OutputProbes);
	}

	HRESULT __fastcall get_Item(VARIANT ProbeIndexVal /*[in] */ ,
				    Ca200srvrlib_tlb::IProbe **
				    ProbeVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IProbe *
	    __fastcall get_Item(VARIANT ProbeIndexVal /*[in] */ );
	HRESULT __fastcall get__NewEnum(LPUNKNOWN *
					pVal /*[out,retval] */ );
	LPUNKNOWN __fastcall get__NewEnum(void);
	HRESULT __fastcall get_Count(long *CountVal /*[out,retval] */ );
	long __fastcall get_Count(void);
	HRESULT __fastcall Add(BSTR ProbeIDVal /*[in] */ );
	HRESULT __fastcall get_ItemOfNumber(long ProbeNumberVal /*[in] */ ,
					    Ca200srvrlib_tlb::IProbe **
					    ProbeVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IProbe *
	    __fastcall get_ItemOfNumber(long ProbeNumberVal /*[in] */ );
	HRESULT __fastcall AddAll();
	HRESULT __fastcall Clone(Ca200srvrlib_tlb::IOutputProbes **
				 CloneVal /*[out,retval] */ );
	Ca200srvrlib_tlb::IOutputProbes * __fastcall Clone(void);
	HRESULT __fastcall RemoveAll();

	__property LPUNKNOWN _NewEnum = { read = get__NewEnum };
	__property long Count = { read = get_Count };
    };
    typedef IOutputProbesDispT < IOutputProbes > IOutputProbesDisp;

// *********************************************************************//
// SmartIntf: TCOMIMemory
// Interface: IMemory
// *********************************************************************//
    template < class T /* IMemory */  >
  class TCOMIMemoryT:public TComInterface < IMemory >,
	public TComInterfaceBase < IUnknown > {
      public:
	TCOMIMemoryT() {
	}
      TCOMIMemoryT(IMemory * intf, bool addRef = false):TComInterface < IMemory > (intf,
				   addRef)
	{
	}
	TCOMIMemoryT(const TCOMIMemoryT & src):TComInterface < IMemory >
	    (src) {
	}
	TCOMIMemoryT & operator=(const TCOMIMemoryT & src) {
	    Bind(src, true);
	    return *this;
	}

	HRESULT __fastcall get_ChannelNO(long *ChannelNOVal
					 /*[out,retval] */ );
	long __fastcall get_ChannelNO(void);
	HRESULT __fastcall set_ChannelNO(long ChannelNOVal /*[in] */ );
	HRESULT __fastcall get_ChannelID(BSTR *
					 ChannelIDVal /*[out,retval] */ );
	BSTR __fastcall get_ChannelID(void);
	HRESULT __fastcall set_ChannelID(BSTR ChannelIDVal /*[in] */ );
	HRESULT __fastcall GetReferenceColor(BSTR ProbeIDVal /*[in] */ ,
					     float *XVal /*[out] */ ,
					     float *YVal /*[out] */ ,
					     float *LvVal /*[out] */ );
	HRESULT __fastcall SetChannelID(BSTR ChannelIDVal /*[in] */ );
	HRESULT __fastcall GetMemoryStatus(long ProbeNOVal /*[in] */ ,
					   long *CalProbeSNOVal /*[out] */
					   ,
					   long *RefProbeSNOVal /*[out] */
					   ,
					   long *CalModeVal /*[out] */ );
	HRESULT __fastcall CheckCalData(long ProbeNOVal /*[in] */ ,
					BSTR FileNameVal /*[in] */ ,
					long *ResultVal /*[out,retval] */
					);
	long __fastcall CheckCalData(long ProbeNOVal /*[in] */ ,
				     BSTR FileNameVal /*[in] */ );
	HRESULT __fastcall CopyToFile(long ProbeNOVal /*[in] */ ,
				      BSTR FileNameVal /*[in] */ );
	HRESULT __fastcall CopyFromFile(long ProbeNOVal /*[in] */ ,
					BSTR FileNameVal /*[in] */ );

	__property long ChannelNO = { read = get_ChannelNO, write =
		set_ChannelNO };
	__property BSTR ChannelID = { read = get_ChannelID };
    };
    typedef TCOMIMemoryT < IMemory > TCOMIMemory;

// *********************************************************************//
// DispIntf:  IMemory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {20EA33BB-6914-465A-B98E-8DBD4E386CD0}
// *********************************************************************//
  template < class T > class IMemoryDispT:public TAutoDriver < IMemory >
    {
      public:
	IMemoryDispT() {
	}

	IMemoryDispT(IMemory * pintf) {
	    TAutoDriver < IMemory >::Bind(pintf, false);
	}

	IMemoryDispT(IMemoryPtr pintf) {
	    TAutoDriver < IMemory >::Bind(pintf, true);
	}

	IMemoryDispT & operator=(IMemory * pintf) {
	    TAutoDriver < IMemory >::Bind(pintf, false);
	    return *this;
	}

	IMemoryDispT & operator=(IMemoryPtr pintf) {
	    TAutoDriver < IMemory >::Bind(pintf, true);
	    return *this;
	}

	HRESULT BindDefault() {
	    return OLECHECK(Bind(CLSID_Memory));
	}

	HRESULT BindRunning() {
	    return BindToActive(CLSID_Memory);
	}

	HRESULT __fastcall get_ChannelNO(long *ChannelNOVal
					 /*[out,retval] */ );
	long __fastcall get_ChannelNO(void);
	HRESULT __fastcall set_ChannelNO(long ChannelNOVal /*[in] */ );
	HRESULT __fastcall get_ChannelID(BSTR *
					 ChannelIDVal /*[out,retval] */ );
	BSTR __fastcall get_ChannelID(void);
	HRESULT __fastcall set_ChannelID(BSTR ChannelIDVal /*[in] */ );
	HRESULT __fastcall GetReferenceColor(BSTR ProbeIDVal /*[in] */ ,
					     float *XVal /*[out] */ ,
					     float *YVal /*[out] */ ,
					     float *LvVal /*[out] */ );
	HRESULT __fastcall SetChannelID(BSTR ChannelIDVal /*[in] */ );
	HRESULT __fastcall GetMemoryStatus(long ProbeNOVal /*[in] */ , long *CalProbeSNOVal	/*[out] */
					   ,
					   long *RefProbeSNOVal /*[out] */
					   ,
					   long *CalModeVal /*[out] */ );
	HRESULT __fastcall CheckCalData(long ProbeNOVal /*[in] */ ,
					BSTR FileNameVal /*[in] */ ,
					long *ResultVal /*[out,retval] */
					);
	long __fastcall CheckCalData(long ProbeNOVal /*[in] */ ,
				     BSTR FileNameVal /*[in] */ );
	HRESULT __fastcall CopyToFile(long ProbeNOVal /*[in] */ ,
				      BSTR FileNameVal /*[in] */ );
	HRESULT __fastcall CopyFromFile(long ProbeNOVal /*[in] */ ,
					BSTR FileNameVal /*[in] */ );

	__property long ChannelNO = { read = get_ChannelNO, write =
		set_ChannelNO };
	__property BSTR ChannelID = { read = get_ChannelID };
    };
    typedef IMemoryDispT < IMemory > IMemoryDisp;

// *********************************************************************//
// DispIntf:  _ICaEvents
// Flags:     (4096) Dispatchable
// GUID:      {F7663750-5900-45EB-905F-78C5D5378481}
// *********************************************************************//
  template < class T > class _ICaEventsDispT:public TAutoDriver < _ICaEvents >
    {
      public:
	_ICaEventsDispT() {
	}

	void Attach(LPUNKNOWN punk) {
	    m_Dispatch = static_cast < T * >(punk);
	}

	void __fastcall ExeCalZero();

    };
    typedef _ICaEventsDispT < _ICaEvents > _ICaEventsDisp;

    typedef TComInterface < IProbeInfo > TCOMIProbeInfo;

// *********************************************************************//
// DispIntf:  IProbeInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5C542273-19D5-4C56-A12A-A58B1BAAD65E}
// *********************************************************************//
  template < class T > class IProbeInfoDispT:public TAutoDriver < IProbeInfo >
    {
      public:
	IProbeInfoDispT() {
	}

	IProbeInfoDispT(IProbeInfo * pintf) {
	    TAutoDriver < IProbeInfo >::Bind(pintf, false);
	}

	IProbeInfoDispT(IProbeInfoPtr pintf) {
	    TAutoDriver < IProbeInfo >::Bind(pintf, true);
	}

	IProbeInfoDispT & operator=(IProbeInfo * pintf) {
	    TAutoDriver < IProbeInfo >::Bind(pintf, false);
	    return *this;
	}

	IProbeInfoDispT & operator=(IProbeInfoPtr pintf) {
	    TAutoDriver < IProbeInfo >::Bind(pintf, true);
	    return *this;
	}

	HRESULT __fastcall get_TypeName(BSTR * pVal /*[out,retval] */ );
	BSTR __fastcall get_TypeName(void);
	HRESULT __fastcall get_TypeNO(long *pVal /*[out,retval] */ );
	long __fastcall get_TypeNO(void);

	__property BSTR TypeName = { read = get_TypeName };
	__property long TypeNO = { read = get_TypeNO };
    };
    typedef IProbeInfoDispT < IProbeInfo > IProbeInfoDisp;

    typedef TComInterface < ICaOption > TCOMICaOption;

// *********************************************************************//
// DispIntf:  ICaOption
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3CBE6157-1D53-4CAE-B4B0-33ACC30E6421}
// *********************************************************************//
  template < class T > class ICaOptionDispT:public TAutoDriver < ICaOption >
    {
      public:
	ICaOptionDispT() {
	}

	ICaOptionDispT(ICaOption * pintf) {
	    TAutoDriver < ICaOption >::Bind(pintf, false);
	}

	ICaOptionDispT(ICaOptionPtr pintf) {
	    TAutoDriver < ICaOption >::Bind(pintf, true);
	}

	ICaOptionDispT & operator=(ICaOption * pintf) {
	    TAutoDriver < ICaOption >::Bind(pintf, false);
	    return *this;
	}

	ICaOptionDispT & operator=(ICaOptionPtr pintf) {
	    TAutoDriver < ICaOption >::Bind(pintf, true);
	    return *this;
	}

	HRESULT __fastcall Command(BSTR CommandVal /*[in] */ ,
				   BSTR * ResponseVal /*[out,retval] */ );
	BSTR __fastcall Command(BSTR CommandVal /*[in] */ );

    };
    typedef ICaOptionDispT < ICaOption > ICaOptionDisp;

// *********************************************************************//
// SmartIntf: TCOMICa200
// Interface: ICa200
// *********************************************************************//
    template < class T > HRESULT __fastcall
	TCOMICa200T <
	T >::get_Cas(Ca200srvrlib_tlb::ICas ** CasVal /*[out,retval] */ ) {
	return (*this)->get_Cas(CasVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICa200T <
	T >::get_Cas(Ca200srvrlib_tlb::ICasPtr *
		     CasVal /*[out,retval] */ ) {
	return (*this)->get_Cas(ICas **) CasVal);
    }

    template < class T > Ca200srvrlib_tlb::ICasPtr __fastcall
	TCOMICa200T < T >::get_Cas(void) {
	Ca200srvrlib_tlb::ICas * CasVal;
	OLECHECK(this->get_Cas((Ca200srvrlib_tlb::ICas **) & CasVal));
	return (Ca200srvrlib_tlb::ICasPtr) CasVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICa200T < T >::SetConfiguration(long CaNumberVal /*[in] */ ,
					    BSTR ConnecStringVal /*[in] */
					    ,
					    long PortVal /*[in] */ ,
					    long BaudRateVal
					    /*[in,def,opt] */ ) {
	return (*this)->SetConfiguration(CaNumberVal, ConnecStringVal,
					 PortVal, BaudRateVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICa200T < T >::AutoConnect(void) {
	return (*this)->AutoConnect();
    }

    template < class T > HRESULT __fastcall
	TCOMICa200T <
	T >::get_SingleCa(Ca200srvrlib_tlb::ICa **
			  SingleCaVal /*[out,retval] */ ) {
	return (*this)->get_SingleCa(SingleCaVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICa200T <
	T >::get_SingleCa(Ca200srvrlib_tlb::ICaPtr *
			  SingleCaVal /*[out,retval] */ ) {
	return (*this)->get_SingleCa(ICa **) SingleCaVal);
    }

    template < class T > Ca200srvrlib_tlb::ICaPtr __fastcall
	TCOMICa200T < T >::get_SingleCa(void) {
	Ca200srvrlib_tlb::ICa * SingleCaVal;
	OLECHECK(this->
		 get_SingleCa((Ca200srvrlib_tlb::ICa **) & SingleCaVal));
	return (Ca200srvrlib_tlb::ICaPtr) SingleCaVal;
    }

// *********************************************************************//
// DispIntf:  ICa200
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB87A8F6-FAF3-433A-B7F3-31BB4D759361}
// *********************************************************************//
    template < class T > HRESULT __fastcall
	ICa200DispT <
	T >::get_Cas(Ca200srvrlib_tlb::ICas ** CasVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Cas"), DISPID(1));
	TAutoArgs < 0 > _args;
	return
	    OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::
					       ICas **) CasVal
			       /*[VT_USERDEFINED:2] */ , _args,
			       OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::ICas * __fastcall
	ICa200DispT < T >::get_Cas(void) {
	Ca200srvrlib_tlb::ICas * CasVal;
	this->get_Cas((Ca200srvrlib_tlb::ICas **) & CasVal);
	return CasVal;
    }

    template < class T > HRESULT __fastcall
	ICa200DispT < T >::SetConfiguration(long CaNumberVal /*[in] */ ,
					    BSTR ConnecStringVal /*[in] */
					    ,
					    long PortVal /*[in] */ ,
					    long BaudRateVal
					    /*[in,def,opt] */ ) {
	_TDispID _dispid(*this, OLETEXT("SetConfiguration"), DISPID(3));
	TAutoArgs < 4 > _args;
	_args[1] = CaNumberVal /*[VT_I4:0] */ ;
	_args[2] = ConnecStringVal /*[VT_BSTR:0] */ ;
	_args[3] = PortVal /*[VT_I4:0] */ ;
	_args[4] = BaudRateVal /*[VT_I4:0] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICa200DispT < T >::AutoConnect() {
	_TDispID _dispid(*this, OLETEXT("AutoConnect"), DISPID(4));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall
	ICa200DispT <
	T >::get_SingleCa(Ca200srvrlib_tlb::ICa **
			  SingleCaVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("SingleCa"), DISPID(2));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::ICa **)
				  SingleCaVal /*[VT_USERDEFINED:2] */ ,
				  _args, OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::ICa * __fastcall
	ICa200DispT < T >::get_SingleCa(void) {
	Ca200srvrlib_tlb::ICa * SingleCaVal;
	this->get_SingleCa((Ca200srvrlib_tlb::ICa **) & SingleCaVal);
	return SingleCaVal;
    }

// *********************************************************************//
// SmartIntf: TCOMICas
// Interface: ICas
// *********************************************************************//
    template < class T > HRESULT __fastcall
	TCOMICasT < T >::get_Item(VARIANT IndexVal /*[in] */ ,
				  Ca200srvrlib_tlb::ICa **
				  CaVal /*[out,retval] */ ) {
	return (*this)->get_Item(IndexVal, CaVal);
    }

    template < class T > Ca200srvrlib_tlb::ICa * __fastcall
	TCOMICasT < T >::get_Item(VARIANT IndexVal /*[in] */ ) {
	Ca200srvrlib_tlb::ICa * CaVal;
	OLECHECK(this->get_Item(, (Ca200srvrlib_tlb::ICa **) & CaVal));
	return CaVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICasT < T >::get__NewEnum(LPUNKNOWN * pVal /*[out,retval] */ )
    {
	return (*this)->get__NewEnum(pVal);
    }

    template < class T > LPUNKNOWN __fastcall
	TCOMICasT < T >::get__NewEnum(void) {
	LPUNKNOWN pVal;
	OLECHECK(this->get__NewEnum((LPUNKNOWN *) & pVal));
	return pVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICasT < T >::get_Count(long *CountVal /*[out,retval] */ ) {
	return (*this)->get_Count(CountVal);
    }

    template < class T > long __fastcall TCOMICasT < T >::get_Count(void) {
	long CountVal;
	OLECHECK(this->get_Count((long *) &CountVal));
	return CountVal;
    }

    template < class T > HRESULT __fastcall TCOMICasT < T >::SendMsr(void) {
	return (*this)->SendMsr();
    }

    template < class T > HRESULT __fastcall
	TCOMICasT < T >::ReceiveMsr(void) {
	return (*this)->ReceiveMsr();
    }

    template < class T > HRESULT __fastcall
	TCOMICasT < T >::get_ItemOfNumber(long CaNumberVal /*[in] */ ,
					  Ca200srvrlib_tlb::ICa **
					  CaVal /*[out,retval] */ ) {
	return (*this)->get_ItemOfNumber(CaNumberVal, CaVal);
    }

    template < class T > Ca200srvrlib_tlb::ICa * __fastcall
	TCOMICasT < T >::get_ItemOfNumber(long CaNumberVal /*[in] */ ) {
	Ca200srvrlib_tlb::ICa * CaVal;
	OLECHECK(this->
		 get_ItemOfNumber(, (Ca200srvrlib_tlb::ICa **) & CaVal));
	return CaVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICasT < T >::SetCaID(long CaNumberVal /*[in] */ ,
				 BSTR CaIDVal /*[in] */ ) {
	return (*this)->SetCaID(CaNumberVal, CaIDVal);
    }

// *********************************************************************//
// DispIntf:  ICas
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5415C7C6-D982-46EE-BA22-FB6DC1AD5DE0}
// *********************************************************************//
    template < class T > HRESULT __fastcall
	ICasDispT < T >::get_Item(VARIANT IndexVal /*[in] */ ,
				  Ca200srvrlib_tlb::ICa **
				  CaVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
	TAutoArgs < 1 > _args;
	_args[1] = IndexVal /*[VT_VARIANT:0] */ ;
	return OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::ICa **)
				  CaVal /*[VT_USERDEFINED:2] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::ICa * __fastcall
	ICasDispT < T >::get_Item(VARIANT IndexVal /*[in] */ ) {
	Ca200srvrlib_tlb::ICa * CaVal;
	this->get_Item(IndexVal, (Ca200srvrlib_tlb::ICa **) & CaVal);
	return CaVal;
    }

    template < class T > HRESULT __fastcall
	ICasDispT < T >::get__NewEnum(LPUNKNOWN * pVal /*[out,retval] */ )
    {
	_TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > LPUNKNOWN __fastcall
	ICasDispT < T >::get__NewEnum(void) {
	LPUNKNOWN pVal;
	this->get__NewEnum((LPUNKNOWN *) & pVal);
	return pVal;
    }

    template < class T > HRESULT __fastcall
	ICasDispT < T >::get_Count(long *CountVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(CountVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall ICasDispT < T >::get_Count(void) {
	long CountVal;
	this->get_Count((long *) &CountVal);
	return CountVal;
    }

    template < class T > HRESULT __fastcall ICasDispT < T >::SendMsr() {
	_TDispID _dispid(*this, OLETEXT("SendMsr"), DISPID(6));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall ICasDispT < T >::ReceiveMsr() {
	_TDispID _dispid(*this, OLETEXT("ReceiveMsr"), DISPID(7));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall
	ICasDispT < T >::get_ItemOfNumber(long CaNumberVal /*[in] */ ,
					  Ca200srvrlib_tlb::ICa **
					  CaVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("ItemOfNumber"), DISPID(8));
	TAutoArgs < 1 > _args;
	_args[1] = CaNumberVal /*[VT_I4:0] */ ;
	return OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::ICa **)
				  CaVal /*[VT_USERDEFINED:2] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::ICa * __fastcall
	ICasDispT < T >::get_ItemOfNumber(long CaNumberVal /*[in] */ ) {
	Ca200srvrlib_tlb::ICa * CaVal;
	this->get_ItemOfNumber(CaNumberVal,
			       (Ca200srvrlib_tlb::ICa **) & CaVal);
	return CaVal;
    }

    template < class T > HRESULT __fastcall
	ICasDispT < T >::SetCaID(long CaNumberVal /*[in] */ ,
				 BSTR CaIDVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("SetCaID"), DISPID(9));
	TAutoArgs < 2 > _args;
	_args[1] = CaNumberVal /*[VT_I4:0] */ ;
	_args[2] = CaIDVal /*[VT_BSTR:0] */ ;
	return OleFunction(_dispid, _args);
    }

// *********************************************************************//
// SmartIntf: TCOMICa
// Interface: ICa
// *********************************************************************//
    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_Probes(Ca200srvrlib_tlb::IProbes **
			ProbesVal /*[out,retval] */ ) {
	return (*this)->get_Probes(ProbesVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_Probes(Ca200srvrlib_tlb::IProbesPtr *
			ProbesVal /*[out,retval] */ ) {
	return (*this)->get_Probes(IProbes **) ProbesVal);
    }

    template < class T > Ca200srvrlib_tlb::IProbesPtr __fastcall
	TCOMICaT < T >::get_Probes(void) {
	Ca200srvrlib_tlb::IProbes * ProbesVal;
	OLECHECK(this->
		 get_Probes((Ca200srvrlib_tlb::IProbes **) & ProbesVal));
	return (Ca200srvrlib_tlb::IProbesPtr) ProbesVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_OutputProbes(Ca200srvrlib_tlb::IOutputProbes **
			      OutputProbesVal /*[out,retval] */ ) {
	return (*this)->get_OutputProbes(OutputProbesVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_OutputProbes(Ca200srvrlib_tlb::IOutputProbesPtr *
			      OutputProbesVal /*[out,retval] */ ) {
	return (*this)->
	    get_OutputProbes(IOutputProbes **) OutputProbesVal);
    }

    template < class T > Ca200srvrlib_tlb::IOutputProbesPtr __fastcall
	TCOMICaT < T >::get_OutputProbes(void) {
	Ca200srvrlib_tlb::IOutputProbes * OutputProbesVal;
	OLECHECK(this->
		 get_OutputProbes((Ca200srvrlib_tlb::
				   IOutputProbes **) & OutputProbesVal));
	return (Ca200srvrlib_tlb::IOutputProbesPtr) OutputProbesVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_Memory(Ca200srvrlib_tlb::IMemory **
			MemoryVal /*[out,retval] */ ) {
	return (*this)->get_Memory(MemoryVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_Memory(Ca200srvrlib_tlb::IMemoryPtr *
			MemoryVal /*[out,retval] */ ) {
	return (*this)->get_Memory(IMemory **) MemoryVal);
    }

    template < class T > Ca200srvrlib_tlb::IMemoryPtr __fastcall
	TCOMICaT < T >::get_Memory(void) {
	Ca200srvrlib_tlb::IMemory * MemoryVal;
	OLECHECK(this->
		 get_Memory((Ca200srvrlib_tlb::IMemory **) & MemoryVal));
	return (Ca200srvrlib_tlb::IMemoryPtr) MemoryVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_DisplayProbe(BSTR * DisplayProbeVal /*[out,retval] */ ) {
	return (*this)->get_DisplayProbe(DisplayProbeVal);
    }

    template < class T > BSTR __fastcall
	TCOMICaT < T >::get_DisplayProbe(void) {
	BSTR DisplayProbeVal = 0;
	OLECHECK(this->get_DisplayProbe((BSTR *) & DisplayProbeVal));
	return DisplayProbeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::set_DisplayProbe(BSTR DisplayProbeVal /*[in] */ ) {
	return (*this)->set_DisplayProbe(DisplayProbeVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_SingleProbe(Ca200srvrlib_tlb::IProbe **
			     SingleProbeVal /*[out,retval] */ ) {
	return (*this)->get_SingleProbe(SingleProbeVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_SingleProbe(Ca200srvrlib_tlb::IProbePtr *
			     SingleProbeVal /*[out,retval] */ ) {
	return (*this)->get_SingleProbe(IProbe **) SingleProbeVal);
    }

    template < class T > Ca200srvrlib_tlb::IProbePtr __fastcall
	TCOMICaT < T >::get_SingleProbe(void) {
	Ca200srvrlib_tlb::IProbe * SingleProbeVal;
	OLECHECK(this->
		 get_SingleProbe((Ca200srvrlib_tlb::
				  IProbe **) & SingleProbeVal));
	return (Ca200srvrlib_tlb::IProbePtr) SingleProbeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::get_SyncMode(float *SyncModeVal /*[out,retval] */ )
    {
	return (*this)->get_SyncMode(SyncModeVal);
    }

    template < class T > float __fastcall
	TCOMICaT < T >::get_SyncMode(void) {
	float SyncModeVal;
	OLECHECK(this->get_SyncMode((float *) &SyncModeVal));
	return SyncModeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::set_SyncMode(float SyncModeVal /*[in] */ ) {
	return (*this)->set_SyncMode(SyncModeVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_DisplayMode(long *DisplayModeVal /*[out,retval] */ ) {
	return (*this)->get_DisplayMode(DisplayModeVal);
    }

    template < class T > long __fastcall
	TCOMICaT < T >::get_DisplayMode(void) {
	long DisplayModeVal;
	OLECHECK(this->get_DisplayMode((long *) &DisplayModeVal));
	return DisplayModeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::set_DisplayMode(long DisplayModeVal /*[in] */ ) {
	return (*this)->set_DisplayMode(DisplayModeVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_DisplayDigits(long *DisplayDigitsVal /*[out,retval] */ ) {
	return (*this)->get_DisplayDigits(DisplayDigitsVal);
    }

    template < class T > long __fastcall
	TCOMICaT < T >::get_DisplayDigits(void) {
	long DisplayDigitsVal;
	OLECHECK(this->get_DisplayDigits((long *) &DisplayDigitsVal));
	return DisplayDigitsVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::set_DisplayDigits(long DisplayDigitsVal /*[in] */ )
    {
	return (*this)->set_DisplayDigits(DisplayDigitsVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_AveragingMode(long *AveragingModeVal /*[out,retval] */ ) {
	return (*this)->get_AveragingMode(AveragingModeVal);
    }

    template < class T > long __fastcall
	TCOMICaT < T >::get_AveragingMode(void) {
	long AveragingModeVal;
	OLECHECK(this->get_AveragingMode((long *) &AveragingModeVal));
	return AveragingModeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::set_AveragingMode(long AveragingModeVal /*[in] */ )
    {
	return (*this)->set_AveragingMode(AveragingModeVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::
	get_BrightnessUnit(long *BrightnessUnitVal /*[out,retval] */ ) {
	return (*this)->get_BrightnessUnit(BrightnessUnitVal);
    }

    template < class T > long __fastcall
	TCOMICaT < T >::get_BrightnessUnit(void) {
	long BrightnessUnitVal;
	OLECHECK(this->get_BrightnessUnit((long *) &BrightnessUnitVal));
	return BrightnessUnitVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::set_BrightnessUnit(long BrightnessUnitVal /*[in] */ ) {
	return (*this)->set_BrightnessUnit(BrightnessUnitVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::get_CAType(BSTR * CATypeVal /*[out,retval] */ ) {
	return (*this)->get_CAType(CATypeVal);
    }

    template < class T > BSTR __fastcall TCOMICaT < T >::get_CAType(void) {
	BSTR CATypeVal = 0;
	OLECHECK(this->get_CAType((BSTR *) & CATypeVal));
	return CATypeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_CAVersion(BSTR * CAVersionVal /*[out,retval] */ ) {
	return (*this)->get_CAVersion(CAVersionVal);
    }

    template < class T > BSTR __fastcall
	TCOMICaT < T >::get_CAVersion(void) {
	BSTR CAVersionVal = 0;
	OLECHECK(this->get_CAVersion((BSTR *) & CAVersionVal));
	return CAVersionVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::get_Number(long *NumberVal /*[out,retval] */ ) {
	return (*this)->get_Number(NumberVal);
    }

    template < class T > long __fastcall TCOMICaT < T >::get_Number(void) {
	long NumberVal;
	OLECHECK(this->get_Number((long *) &NumberVal));
	return NumberVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::get_PortID(BSTR * PortIDVal /*[out,retval] */ ) {
	return (*this)->get_PortID(PortIDVal);
    }

    template < class T > BSTR __fastcall TCOMICaT < T >::get_PortID(void) {
	BSTR PortIDVal = 0;
	OLECHECK(this->get_PortID((BSTR *) & PortIDVal));
	return PortIDVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::get_ID(BSTR * CaIDVal /*[out,retval] */ ) {
	return (*this)->get_ID(CaIDVal);
    }

    template < class T > BSTR __fastcall TCOMICaT < T >::get_ID(void) {
	BSTR CaIDVal = 0;
	OLECHECK(this->get_ID((BSTR *) & CaIDVal));
	return CaIDVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::set_ID(BSTR CaIDVal /*[in] */ ) {
	return (*this)->set_ID(CaIDVal);
    }

    template < class T > HRESULT __fastcall TCOMICaT < T >::CalZero(void) {
	return (*this)->CalZero();
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::Measure(long newVal /*[in,def,opt] */ ) {
	return (*this)->Measure(newVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::SetAnalyzerCalMode(void) {
	return (*this)->SetAnalyzerCalMode();
    }

    template < class T > HRESULT __fastcall TCOMICaT < T >::Enter(void) {
	return (*this)->Enter();
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::SetAnalogRange(float Range1Val /*[in] */ ,
				       float Range2Val /*[in] */ ) {
	return (*this)->SetAnalogRange(Range1Val, Range2Val);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::SetPWROnStatus(void) {
	return (*this)->SetPWROnStatus();
    }

    template < class T > HRESULT __fastcall
	TCOMICaT <
	T >::get_CalStandard(long *CalStandardVal /*[out,retval] */ ) {
	return (*this)->get_CalStandard(CalStandardVal);
    }

    template < class T > long __fastcall
	TCOMICaT < T >::get_CalStandard(void) {
	long CalStandardVal;
	OLECHECK(this->get_CalStandard((long *) &CalStandardVal));
	return CalStandardVal;
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::set_CalStandard(long CalStandardVal /*[in] */ ) {
	return (*this)->set_CalStandard(CalStandardVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::ResetAnalyzerCalMode(void) {
	return (*this)->ResetAnalyzerCalMode();
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::SetLvxyCalMode(void) {
	return (*this)->SetLvxyCalMode();
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::ResetLvxyCalMode(void) {
	return (*this)->ResetLvxyCalMode();
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::SetAnalyzerCalData(long ColorVal) {
	return (*this)->SetAnalyzerCalData(ColorVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::SetDisplayProbe(long ProbeNumberVal) {
	return (*this)->SetDisplayProbe(ProbeNumberVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::SetLvxyCalData(long ColorVal, float XVal,
				       float YVal, float LvVal) {
	return (*this)->SetLvxyCalData(ColorVal, XVal, YVal, LvVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::set_RemoteMode(long Param1 /*[in] */ ) {
	return (*this)->set_RemoteMode(Param1);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::SetFMAAnalogRange(float RangeVal /*[in] */ ) {
	return (*this)->SetFMAAnalogRange(RangeVal);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::GetAnalogRange(float *Range1Val /*[out] */ ,
				       float *Range2Val /*[out] */ ) {
	return (*this)->GetAnalogRange(Range1Val, Range2Val);
    }

    template < class T > HRESULT __fastcall
	TCOMICaT < T >::GetFMAAnalogRange(float *RangeVal /*[out] */ ) {
	return (*this)->GetFMAAnalogRange(RangeVal);
    }

// *********************************************************************//
// DispIntf:  ICa
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A930F0DB-F79A-467A-8479-F8369B063B8D}
// *********************************************************************//
    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::get_Probes(Ca200srvrlib_tlb::IProbes **
			ProbesVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Probes"), DISPID(1));
	TAutoArgs < 0 > _args;
	return
	    OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::
					       IProbes **) ProbesVal
			       /*[VT_USERDEFINED:2] */ , _args,
			       OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::IProbes * __fastcall
	ICaDispT < T >::get_Probes(void) {
	Ca200srvrlib_tlb::IProbes * ProbesVal;
	this->get_Probes((Ca200srvrlib_tlb::IProbes **) & ProbesVal);
	return ProbesVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::get_OutputProbes(Ca200srvrlib_tlb::IOutputProbes **
			      OutputProbesVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("OutputProbes"), DISPID(2));
	TAutoArgs < 0 > _args;
	return
	    OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::
					       IOutputProbes **)
			       OutputProbesVal /*[VT_USERDEFINED:2] */ ,
			       _args, OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::IOutputProbes * __fastcall
	ICaDispT < T >::get_OutputProbes(void) {
	Ca200srvrlib_tlb::IOutputProbes * OutputProbesVal;
	this->
	    get_OutputProbes((Ca200srvrlib_tlb::
			      IOutputProbes **) & OutputProbesVal);
	return OutputProbesVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::get_Memory(Ca200srvrlib_tlb::IMemory **
			MemoryVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Memory"), DISPID(3));
	TAutoArgs < 0 > _args;
	return
	    OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::
					       IMemory **) MemoryVal
			       /*[VT_USERDEFINED:2] */ , _args,
			       OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::IMemory * __fastcall
	ICaDispT < T >::get_Memory(void) {
	Ca200srvrlib_tlb::IMemory * MemoryVal;
	this->get_Memory((Ca200srvrlib_tlb::IMemory **) & MemoryVal);
	return MemoryVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::get_DisplayProbe(BSTR * DisplayProbeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("DisplayProbe"), DISPID(4));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(DisplayProbeVal /*[VT_BSTR:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > BSTR __fastcall
	ICaDispT < T >::get_DisplayProbe(void) {
	BSTR DisplayProbeVal;
	this->get_DisplayProbe((BSTR *) & DisplayProbeVal);
	return DisplayProbeVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::set_DisplayProbe(BSTR DisplayProbeVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("DisplayProbe"), DISPID(4));
	TAutoArgs < 1 > _args;
	_args[1] = DisplayProbeVal /*[VT_BSTR:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::get_SingleProbe(Ca200srvrlib_tlb::IProbe **
			     SingleProbeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("SingleProbe"), DISPID(5));
	TAutoArgs < 0 > _args;
	return
	    OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::
					       IProbe **) SingleProbeVal
			       /*[VT_USERDEFINED:2] */ , _args,
			       OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::IProbe * __fastcall
	ICaDispT < T >::get_SingleProbe(void) {
	Ca200srvrlib_tlb::IProbe * SingleProbeVal;
	this->
	    get_SingleProbe((Ca200srvrlib_tlb::
			     IProbe **) & SingleProbeVal);
	return SingleProbeVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::get_SyncMode(float *SyncModeVal /*[out,retval] */ )
    {
	_TDispID _dispid(*this, OLETEXT("SyncMode"), DISPID(6));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(SyncModeVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall
	ICaDispT < T >::get_SyncMode(void) {
	float SyncModeVal;
	this->get_SyncMode((float *) &SyncModeVal);
	return SyncModeVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::set_SyncMode(float SyncModeVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("SyncMode"), DISPID(6));
	TAutoArgs < 1 > _args;
	_args[1] = SyncModeVal /*[VT_R4:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::get_DisplayMode(long *DisplayModeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("DisplayMode"), DISPID(7));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(DisplayModeVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	ICaDispT < T >::get_DisplayMode(void) {
	long DisplayModeVal;
	this->get_DisplayMode((long *) &DisplayModeVal);
	return DisplayModeVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::set_DisplayMode(long DisplayModeVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("DisplayMode"), DISPID(7));
	TAutoArgs < 1 > _args;
	_args[1] = DisplayModeVal /*[VT_I4:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::get_DisplayDigits(long *DisplayDigitsVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("DisplayDigits"), DISPID(8));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(DisplayDigitsVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	ICaDispT < T >::get_DisplayDigits(void) {
	long DisplayDigitsVal;
	this->get_DisplayDigits((long *) &DisplayDigitsVal);
	return DisplayDigitsVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::set_DisplayDigits(long DisplayDigitsVal /*[in] */ )
    {
	_TDispID _dispid(*this, OLETEXT("DisplayDigits"), DISPID(8));
	TAutoArgs < 1 > _args;
	_args[1] = DisplayDigitsVal /*[VT_I4:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::get_AveragingMode(long *AveragingModeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("AveragingMode"), DISPID(9));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(AveragingModeVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	ICaDispT < T >::get_AveragingMode(void) {
	long AveragingModeVal;
	this->get_AveragingMode((long *) &AveragingModeVal);
	return AveragingModeVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::set_AveragingMode(long AveragingModeVal /*[in] */ )
    {
	_TDispID _dispid(*this, OLETEXT("AveragingMode"), DISPID(9));
	TAutoArgs < 1 > _args;
	_args[1] = AveragingModeVal /*[VT_I4:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::
	get_BrightnessUnit(long *BrightnessUnitVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("BrightnessUnit"), DISPID(10));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(BrightnessUnitVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	ICaDispT < T >::get_BrightnessUnit(void) {
	long BrightnessUnitVal;
	this->get_BrightnessUnit((long *) &BrightnessUnitVal);
	return BrightnessUnitVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::set_BrightnessUnit(long BrightnessUnitVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("BrightnessUnit"), DISPID(10));
	TAutoArgs < 1 > _args;
	_args[1] = BrightnessUnitVal /*[VT_I4:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::get_CAType(BSTR * CATypeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("CAType"), DISPID(12));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(CATypeVal /*[VT_BSTR:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > BSTR __fastcall ICaDispT < T >::get_CAType(void) {
	BSTR CATypeVal;
	this->get_CAType((BSTR *) & CATypeVal);
	return CATypeVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::get_CAVersion(BSTR * CAVersionVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("CAVersion"), DISPID(13));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(CAVersionVal /*[VT_BSTR:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > BSTR __fastcall
	ICaDispT < T >::get_CAVersion(void) {
	BSTR CAVersionVal;
	this->get_CAVersion((BSTR *) & CAVersionVal);
	return CAVersionVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::get_Number(long *NumberVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Number"), DISPID(14));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(NumberVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall ICaDispT < T >::get_Number(void) {
	long NumberVal;
	this->get_Number((long *) &NumberVal);
	return NumberVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::get_PortID(BSTR * PortIDVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("PortID"), DISPID(15));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(PortIDVal /*[VT_BSTR:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > BSTR __fastcall ICaDispT < T >::get_PortID(void) {
	BSTR PortIDVal;
	this->get_PortID((BSTR *) & PortIDVal);
	return PortIDVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::get_ID(BSTR * CaIDVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("ID"), DISPID(16));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(CaIDVal /*[VT_BSTR:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > BSTR __fastcall ICaDispT < T >::get_ID(void) {
	BSTR CaIDVal;
	this->get_ID((BSTR *) & CaIDVal);
	return CaIDVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::set_ID(BSTR CaIDVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("ID"), DISPID(16));
	TAutoArgs < 1 > _args;
	_args[1] = CaIDVal /*[VT_BSTR:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall ICaDispT < T >::CalZero() {
	_TDispID _dispid(*this, OLETEXT("CalZero"), DISPID(17));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::Measure(long newVal /*[in,def,opt] */ ) {
	_TDispID _dispid(*this, OLETEXT("Measure"), DISPID(18));
	TAutoArgs < 1 > _args;
	_args[1] = newVal /*[VT_I4:0] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::SetAnalyzerCalMode() {
	_TDispID _dispid(*this, OLETEXT("SetAnalyzerCalMode"), DISPID(19));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall ICaDispT < T >::Enter() {
	_TDispID _dispid(*this, OLETEXT("Enter"), DISPID(20));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::SetAnalogRange(float Range1Val /*[in] */ ,
				       float Range2Val /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("SetAnalogRange"), DISPID(21));
	TAutoArgs < 2 > _args;
	_args[1] = Range1Val /*[VT_R4:0] */ ;
	_args[2] = Range2Val /*[VT_R4:0] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::SetPWROnStatus() {
	_TDispID _dispid(*this, OLETEXT("SetPWROnStatus"), DISPID(24));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall
	ICaDispT <
	T >::get_CalStandard(long *CalStandardVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("CalStandard"), DISPID(34));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(CalStandardVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	ICaDispT < T >::get_CalStandard(void) {
	long CalStandardVal;
	this->get_CalStandard((long *) &CalStandardVal);
	return CalStandardVal;
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::set_CalStandard(long CalStandardVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("CalStandard"), DISPID(34));
	TAutoArgs < 1 > _args;
	_args[1] = CalStandardVal /*[VT_I4:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::ResetAnalyzerCalMode() {
	_TDispID _dispid(*this, OLETEXT("ResetAnalyzerCalMode"),
			 DISPID(35));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::SetLvxyCalMode() {
	_TDispID _dispid(*this, OLETEXT("SetLvxyCalMode"), DISPID(36));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::ResetLvxyCalMode() {
	_TDispID _dispid(*this, OLETEXT("ResetLvxyCalMode"), DISPID(37));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::SetAnalyzerCalData(long ColorVal) {
	_TDispID _dispid(*this, OLETEXT("SetAnalyzerCalData"), DISPID(38));
	TAutoArgs < 1 > _args;
	_args[1] = ColorVal /*[VT_I4:0] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::SetDisplayProbe(long ProbeNumberVal) {
	_TDispID _dispid(*this, OLETEXT("SetDisplayProbe"), DISPID(39));
	TAutoArgs < 1 > _args;
	_args[1] = ProbeNumberVal /*[VT_I4:0] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::SetLvxyCalData(long ColorVal, float XVal,
				       float YVal, float LvVal) {
	_TDispID _dispid(*this, OLETEXT("SetLvxyCalData"), DISPID(40));
	TAutoArgs < 4 > _args;
	_args[1] = ColorVal /*[VT_I4:0] */ ;
	_args[2] = XVal /*[VT_R4:0] */ ;
	_args[3] = YVal /*[VT_R4:0] */ ;
	_args[4] = LvVal /*[VT_R4:0] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::set_RemoteMode(long Param1 /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("RemoteMode"), DISPID(41));
	TAutoArgs < 1 > _args;
	_args[1] = Param1 /*[VT_I4:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::SetFMAAnalogRange(float RangeVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("SetFMAAnalogRange"), DISPID(42));
	TAutoArgs < 1 > _args;
	_args[1] = RangeVal /*[VT_R4:0] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::GetAnalogRange(float *Range1Val /*[out] */ ,
				       float *Range2Val /*[out] */ ) {
	_TDispID _dispid(*this, OLETEXT("GetAnalogRange"), DISPID(43));
	TAutoArgs < 2 > _args;
	_args[1] = Range1Val /*[VT_R4:1] */ ;
	_args[2] = Range2Val /*[VT_R4:1] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	ICaDispT < T >::GetFMAAnalogRange(float *RangeVal /*[out] */ ) {
	_TDispID _dispid(*this, OLETEXT("GetFMAAnalogRange"), DISPID(44));
	TAutoArgs < 1 > _args;
	_args[1] = RangeVal /*[VT_R4:1] */ ;
	return OleFunction(_dispid, _args);
    }

// *********************************************************************//
// SmartIntf: TCOMIProbes
// Interface: IProbes
// *********************************************************************//
    template < class T > HRESULT __fastcall
	TCOMIProbesT < T >::get_Item(VARIANT IndexVal /*[in] */ ,
				     Ca200srvrlib_tlb::IProbe **
				     ItemVal /*[out,retval] */ ) {
	return (*this)->get_Item(IndexVal, ItemVal);
    }

    template < class T > Ca200srvrlib_tlb::IProbe * __fastcall
	TCOMIProbesT < T >::get_Item(VARIANT IndexVal /*[in] */ ) {
	Ca200srvrlib_tlb::IProbe * ItemVal;
	OLECHECK(this->
		 get_Item(, (Ca200srvrlib_tlb::IProbe **) & ItemVal));
	return ItemVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbesT <
	T >::get__NewEnum(LPUNKNOWN * pVal /*[out,retval] */ ) {
	return (*this)->get__NewEnum(pVal);
    }

    template < class T > LPUNKNOWN __fastcall
	TCOMIProbesT < T >::get__NewEnum(void) {
	LPUNKNOWN pVal;
	OLECHECK(this->get__NewEnum((LPUNKNOWN *) & pVal));
	return pVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbesT < T >::get_Count(long *CountVal /*[out,retval] */ ) {
	return (*this)->get_Count(CountVal);
    }

    template < class T > long __fastcall
	TCOMIProbesT < T >::get_Count(void) {
	long CountVal;
	OLECHECK(this->get_Count((long *) &CountVal));
	return CountVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbesT < T >::get_ItemOfNumber(long ProbeNumber /*[in] */ ,
					     Ca200srvrlib_tlb::IProbe **
					     ProbeVal /*[out,retval] */ ) {
	return (*this)->get_ItemOfNumber(ProbeNumber, ProbeVal);
    }

    template < class T > Ca200srvrlib_tlb::IProbe * __fastcall
	TCOMIProbesT < T >::get_ItemOfNumber(long ProbeNumber /*[in] */ ) {
	Ca200srvrlib_tlb::IProbe * ProbeVal;
	OLECHECK(this->
		 get_ItemOfNumber(,
				  (Ca200srvrlib_tlb::
				   IProbe **) & ProbeVal));
	return ProbeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbesT < T >::SetProbeID(long ProbeNumberVal /*[in] */ ,
				       BSTR ProbeIDVal /*[in] */ ) {
	return (*this)->SetProbeID(ProbeNumberVal, ProbeIDVal);
    }

// *********************************************************************//
// DispIntf:  IProbes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B455EFE8-1576-481C-BAC6-A1C506BF4E81}
// *********************************************************************//
    template < class T > HRESULT __fastcall
	IProbesDispT < T >::get_Item(VARIANT IndexVal /*[in] */ ,
				     Ca200srvrlib_tlb::IProbe **
				     ItemVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
	TAutoArgs < 1 > _args;
	_args[1] = IndexVal /*[VT_VARIANT:0] */ ;
	return
	    OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::
					       IProbe **) ItemVal
			       /*[VT_USERDEFINED:2] */ , _args,
			       OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::IProbe * __fastcall
	IProbesDispT < T >::get_Item(VARIANT IndexVal /*[in] */ ) {
	Ca200srvrlib_tlb::IProbe * ItemVal;
	this->get_Item(IndexVal, (Ca200srvrlib_tlb::IProbe **) & ItemVal);
	return ItemVal;
    }

    template < class T > HRESULT __fastcall
	IProbesDispT <
	T >::get__NewEnum(LPUNKNOWN * pVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > LPUNKNOWN __fastcall
	IProbesDispT < T >::get__NewEnum(void) {
	LPUNKNOWN pVal;
	this->get__NewEnum((LPUNKNOWN *) & pVal);
	return pVal;
    }

    template < class T > HRESULT __fastcall
	IProbesDispT < T >::get_Count(long *CountVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(CountVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	IProbesDispT < T >::get_Count(void) {
	long CountVal;
	this->get_Count((long *) &CountVal);
	return CountVal;
    }

    template < class T > HRESULT __fastcall
	IProbesDispT < T >::get_ItemOfNumber(long ProbeNumber /*[in] */ ,
					     Ca200srvrlib_tlb::IProbe **
					     ProbeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("ItemOfNumber"), DISPID(6));
	TAutoArgs < 1 > _args;
	_args[1] = ProbeNumber /*[VT_I4:0] */ ;
	return
	    OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::
					       IProbe **) ProbeVal
			       /*[VT_USERDEFINED:2] */ , _args,
			       OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::IProbe * __fastcall
	IProbesDispT < T >::get_ItemOfNumber(long ProbeNumber /*[in] */ ) {
	Ca200srvrlib_tlb::IProbe * ProbeVal;
	this->get_ItemOfNumber(ProbeNumber,
			       (Ca200srvrlib_tlb::IProbe **) & ProbeVal);
	return ProbeVal;
    }

    template < class T > HRESULT __fastcall
	IProbesDispT < T >::SetProbeID(long ProbeNumberVal /*[in] */ ,
				       BSTR ProbeIDVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("SetProbeID"), DISPID(7));
	TAutoArgs < 2 > _args;
	_args[1] = ProbeNumberVal /*[VT_I4:0] */ ;
	_args[2] = ProbeIDVal /*[VT_BSTR:0] */ ;
	return OleFunction(_dispid, _args);
    }

// *********************************************************************//
// SmartIntf: TCOMIProbe
// Interface: IProbe
// *********************************************************************//
    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_X(float *XVal /*[out,retval] */ ) {
	return (*this)->get_X(XVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_X(void) {
	float XVal;
	OLECHECK(this->get_X((float *) &XVal));
	return XVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_Y(float *YVal /*[out,retval] */ ) {
	return (*this)->get_Y(YVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_Y(void) {
	float YVal;
	OLECHECK(this->get_Y((float *) &YVal));
	return YVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_Z(float *ZVal /*[out,retval] */ ) {
	return (*this)->get_Z(ZVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_Z(void) {
	float ZVal;
	OLECHECK(this->get_Z((float *) &ZVal));
	return ZVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT <
	T >::get_FlckrJEITA(float *FlckrJEITAVal /*[out,retval] */ ) {
	return (*this)->get_FlckrJEITA(FlckrJEITAVal);
    }

    template < class T > float __fastcall
	TCOMIProbeT < T >::get_FlckrJEITA(void) {
	float FlckrJEITAVal;
	OLECHECK(this->get_FlckrJEITA((float *) &FlckrJEITAVal));
	return FlckrJEITAVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_Number(long *NumberVal /*[out,retval] */ ) {
	return (*this)->get_Number(NumberVal);
    }

    template < class T > long __fastcall
	TCOMIProbeT < T >::get_Number(void) {
	long NumberVal;
	OLECHECK(this->get_Number((long *) &NumberVal));
	return NumberVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_ID(BSTR * ProbeIDVal /*[out,retval] */ ) {
	return (*this)->get_ID(ProbeIDVal);
    }

    template < class T > BSTR __fastcall TCOMIProbeT < T >::get_ID(void) {
	BSTR ProbeIDVal = 0;
	OLECHECK(this->get_ID((BSTR *) & ProbeIDVal));
	return ProbeIDVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::set_ID(BSTR ProbeIDVal /*[in] */ ) {
	return (*this)->set_ID(ProbeIDVal);
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT <
	T >::get_SerialNO(BSTR * SerialNOVal /*[out,retval] */ ) {
	return (*this)->get_SerialNO(SerialNOVal);
    }

    template < class T > BSTR __fastcall
	TCOMIProbeT < T >::get_SerialNO(void) {
	BSTR SerialNOVal = 0;
	OLECHECK(this->get_SerialNO((BSTR *) & SerialNOVal));
	return SerialNOVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_Lv(float *LvVal /*[out,retval] */ ) {
	return (*this)->get_Lv(LvVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_Lv(void) {
	float LvVal;
	OLECHECK(this->get_Lv((float *) &LvVal));
	return LvVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_ud(float *udVal /*[out,retval] */ ) {
	return (*this)->get_ud(udVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_ud(void) {
	float udVal;
	OLECHECK(this->get_ud((float *) &udVal));
	return udVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_vd(float *vdVal /*[out,retval] */ ) {
	return (*this)->get_vd(vdVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_vd(void) {
	float vdVal;
	OLECHECK(this->get_vd((float *) &vdVal));
	return vdVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_T(long *TVal /*[out,retval] */ ) {
	return (*this)->get_T(TVal);
    }

    template < class T > long __fastcall TCOMIProbeT < T >::get_T(void) {
	long TVal;
	OLECHECK(this->get_T((long *) &TVal));
	return TVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_dEUser(float *EUserVal /*[out,retval] */ ) {
	return (*this)->get_dEUser(EUserVal);
    }

    template < class T > float __fastcall
	TCOMIProbeT < T >::get_dEUser(void) {
	float EUserVal;
	OLECHECK(this->get_dEUser((float *) &EUserVal));
	return EUserVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT <
	T >::get_FlckrFMA(float *FlckrFMAVal /*[out,retval] */ ) {
	return (*this)->get_FlckrFMA(FlckrFMAVal);
    }

    template < class T > float __fastcall
	TCOMIProbeT < T >::get_FlckrFMA(void) {
	float FlckrFMAVal;
	OLECHECK(this->get_FlckrFMA((float *) &FlckrFMAVal));
	return FlckrFMAVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_sy(float *syVal /*[out,retval] */ ) {
	return (*this)->get_sy(syVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_sy(void) {
	float syVal;
	OLECHECK(this->get_sy((float *) &syVal));
	return syVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_sx(float *sxVal /*[out,retval] */ ) {
	return (*this)->get_sx(sxVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_sx(void) {
	float sxVal;
	OLECHECK(this->get_sx((float *) &sxVal));
	return sxVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_duv(float *duvVal /*[out,retval] */ ) {
	return (*this)->get_duv(duvVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_duv(void) {
	float duvVal;
	OLECHECK(this->get_duv((float *) &duvVal));
	return duvVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_usUser(float *usUserVal /*[out,retval] */ )
    {
	return (*this)->get_usUser(usUserVal);
    }

    template < class T > float __fastcall
	TCOMIProbeT < T >::get_usUser(void) {
	float usUserVal;
	OLECHECK(this->get_usUser((float *) &usUserVal));
	return usUserVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_vsUser(float *vsUserVal /*[out,retval] */ )
    {
	return (*this)->get_vsUser(vsUserVal);
    }

    template < class T > float __fastcall
	TCOMIProbeT < T >::get_vsUser(void) {
	float vsUserVal;
	OLECHECK(this->get_vsUser((float *) &vsUserVal));
	return vsUserVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_LsUser(float *LsUserVal /*[out,retval] */ )
    {
	return (*this)->get_LsUser(LsUserVal);
    }

    template < class T > float __fastcall
	TCOMIProbeT < T >::get_LsUser(void) {
	float LsUserVal;
	OLECHECK(this->get_LsUser((float *) &LsUserVal));
	return LsUserVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_LvfL(float *LvfLVal /*[out,retval] */ ) {
	return (*this)->get_LvfL(LvfLVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_LvfL(void) {
	float LvfLVal;
	OLECHECK(this->get_LvfL((float *) &LvfLVal));
	return LvfLVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_R(float *RVal /*[out,retval] */ ) {
	return (*this)->get_R(RVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_R(void) {
	float RVal;
	OLECHECK(this->get_R((float *) &RVal));
	return RVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_G(float *GVal /*[out,retval] */ ) {
	return (*this)->get_G(GVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_G(void) {
	float GVal;
	OLECHECK(this->get_G((float *) &GVal));
	return GVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_B(float *BVal /*[out,retval] */ ) {
	return (*this)->get_B(BVal);
    }

    template < class T > float __fastcall TCOMIProbeT < T >::get_B(void) {
	float BVal;
	OLECHECK(this->get_B((float *) &BVal));
	return BVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_RD(long *RCodeVal /*[out,retval] */ ) {
	return (*this)->get_RD(RCodeVal);
    }

    template < class T > long __fastcall TCOMIProbeT < T >::get_RD(void) {
	long RCodeVal;
	OLECHECK(this->get_RD((long *) &RCodeVal));
	return RCodeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_RAD(long *RCodeVal /*[out,retval] */ ) {
	return (*this)->get_RAD(RCodeVal);
    }

    template < class T > long __fastcall TCOMIProbeT < T >::get_RAD(void) {
	long RCodeVal;
	OLECHECK(this->get_RAD((long *) &RCodeVal));
	return RCodeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_RFMA(long *RCodeVal /*[out,retval] */ ) {
	return (*this)->get_RFMA(RCodeVal);
    }

    template < class T > long __fastcall TCOMIProbeT < T >::get_RFMA(void) {
	long RCodeVal;
	OLECHECK(this->get_RFMA((long *) &RCodeVal));
	return RCodeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::get_RJEITA(long *RCodeVal /*[out,retval] */ ) {
	return (*this)->get_RJEITA(RCodeVal);
    }

    template < class T > long __fastcall
	TCOMIProbeT < T >::get_RJEITA(void) {
	long RCodeVal;
	OLECHECK(this->get_RJEITA((long *) &RCodeVal));
	return RCodeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIProbeT < T >::GetSpectrum(long Frequency /*[in] */ ,
				       float *SpectrumValue
				       /*[out,retval] */ ) {
	return (*this)->GetSpectrum(Frequency, SpectrumValue);
    }

    template < class T > float __fastcall
	TCOMIProbeT < T >::GetSpectrum(long Frequency /*[in] */ ) {
	float SpectrumValue;
	OLECHECK(this->GetSpectrum(, (float *) &SpectrumValue));
	return SpectrumValue;
    }

// *********************************************************************//
// DispIntf:  IProbe
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2FDD51E-CBA7-45CE-AF0A-DD962E46B74F}
// *********************************************************************//
    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_X(float *XVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("X"), DISPID(1));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(XVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_X(void) {
	float XVal;
	this->get_X((float *) &XVal);
	return XVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_Y(float *YVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Y"), DISPID(2));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(YVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_Y(void) {
	float YVal;
	this->get_Y((float *) &YVal);
	return YVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_Z(float *ZVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Z"), DISPID(3));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(ZVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_Z(void) {
	float ZVal;
	this->get_Z((float *) &ZVal);
	return ZVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT <
	T >::get_FlckrJEITA(float *FlckrJEITAVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("FlckrJEITA"), DISPID(4));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(FlckrJEITAVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall
	IProbeDispT < T >::get_FlckrJEITA(void) {
	float FlckrJEITAVal;
	this->get_FlckrJEITA((float *) &FlckrJEITAVal);
	return FlckrJEITAVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_Number(long *NumberVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Number"), DISPID(5));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(NumberVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	IProbeDispT < T >::get_Number(void) {
	long NumberVal;
	this->get_Number((long *) &NumberVal);
	return NumberVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_ID(BSTR * ProbeIDVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("ID"), DISPID(6));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(ProbeIDVal /*[VT_BSTR:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > BSTR __fastcall IProbeDispT < T >::get_ID(void) {
	BSTR ProbeIDVal;
	this->get_ID((BSTR *) & ProbeIDVal);
	return ProbeIDVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::set_ID(BSTR ProbeIDVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("ID"), DISPID(6));
	TAutoArgs < 1 > _args;
	_args[1] = ProbeIDVal /*[VT_BSTR:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	IProbeDispT <
	T >::get_SerialNO(BSTR * SerialNOVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("SerialNO"), DISPID(7));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(SerialNOVal /*[VT_BSTR:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > BSTR __fastcall
	IProbeDispT < T >::get_SerialNO(void) {
	BSTR SerialNOVal;
	this->get_SerialNO((BSTR *) & SerialNOVal);
	return SerialNOVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_Lv(float *LvVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Lv"), DISPID(10));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(LvVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_Lv(void) {
	float LvVal;
	this->get_Lv((float *) &LvVal);
	return LvVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_ud(float *udVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("ud"), DISPID(11));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(udVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_ud(void) {
	float udVal;
	this->get_ud((float *) &udVal);
	return udVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_vd(float *vdVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("vd"), DISPID(12));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(vdVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_vd(void) {
	float vdVal;
	this->get_vd((float *) &vdVal);
	return vdVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_T(long *TVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("T"), DISPID(13));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(TVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall IProbeDispT < T >::get_T(void) {
	long TVal;
	this->get_T((long *) &TVal);
	return TVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_dEUser(float *EUserVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("dEUser"), DISPID(17));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(EUserVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall
	IProbeDispT < T >::get_dEUser(void) {
	float EUserVal;
	this->get_dEUser((float *) &EUserVal);
	return EUserVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT <
	T >::get_FlckrFMA(float *FlckrFMAVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("FlckrFMA"), DISPID(21));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(FlckrFMAVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall
	IProbeDispT < T >::get_FlckrFMA(void) {
	float FlckrFMAVal;
	this->get_FlckrFMA((float *) &FlckrFMAVal);
	return FlckrFMAVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_sy(float *syVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("sy"), DISPID(22));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(syVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_sy(void) {
	float syVal;
	this->get_sy((float *) &syVal);
	return syVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_sx(float *sxVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("sx"), DISPID(23));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(sxVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_sx(void) {
	float sxVal;
	this->get_sx((float *) &sxVal);
	return sxVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_duv(float *duvVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("duv"), DISPID(24));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(duvVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_duv(void) {
	float duvVal;
	this->get_duv((float *) &duvVal);
	return duvVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_usUser(float *usUserVal /*[out,retval] */ )
    {
	_TDispID _dispid(*this, OLETEXT("usUser"), DISPID(25));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(usUserVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall
	IProbeDispT < T >::get_usUser(void) {
	float usUserVal;
	this->get_usUser((float *) &usUserVal);
	return usUserVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_vsUser(float *vsUserVal /*[out,retval] */ )
    {
	_TDispID _dispid(*this, OLETEXT("vsUser"), DISPID(26));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(vsUserVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall
	IProbeDispT < T >::get_vsUser(void) {
	float vsUserVal;
	this->get_vsUser((float *) &vsUserVal);
	return vsUserVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_LsUser(float *LsUserVal /*[out,retval] */ )
    {
	_TDispID _dispid(*this, OLETEXT("LsUser"), DISPID(27));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(LsUserVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall
	IProbeDispT < T >::get_LsUser(void) {
	float LsUserVal;
	this->get_LsUser((float *) &LsUserVal);
	return LsUserVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_LvfL(float *LvfLVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("LvfL"), DISPID(29));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(LvfLVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_LvfL(void) {
	float LvfLVal;
	this->get_LvfL((float *) &LvfLVal);
	return LvfLVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_R(float *RVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("R"), DISPID(30));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(RVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_R(void) {
	float RVal;
	this->get_R((float *) &RVal);
	return RVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_G(float *GVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("G"), DISPID(31));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(GVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_G(void) {
	float GVal;
	this->get_G((float *) &GVal);
	return GVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_B(float *BVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("B"), DISPID(32));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(BVal /*[VT_R4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > float __fastcall IProbeDispT < T >::get_B(void) {
	float BVal;
	this->get_B((float *) &BVal);
	return BVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_RD(long *RCodeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("RD"), DISPID(33));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(RCodeVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall IProbeDispT < T >::get_RD(void) {
	long RCodeVal;
	this->get_RD((long *) &RCodeVal);
	return RCodeVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_RAD(long *RCodeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("RAD"), DISPID(34));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(RCodeVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall IProbeDispT < T >::get_RAD(void) {
	long RCodeVal;
	this->get_RAD((long *) &RCodeVal);
	return RCodeVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_RFMA(long *RCodeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("RFMA"), DISPID(35));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(RCodeVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall IProbeDispT < T >::get_RFMA(void) {
	long RCodeVal;
	this->get_RFMA((long *) &RCodeVal);
	return RCodeVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::get_RJEITA(long *RCodeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("RJEITA"), DISPID(36));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(RCodeVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	IProbeDispT < T >::get_RJEITA(void) {
	long RCodeVal;
	this->get_RJEITA((long *) &RCodeVal);
	return RCodeVal;
    }

    template < class T > HRESULT __fastcall
	IProbeDispT < T >::GetSpectrum(long Frequency /*[in] */ ,
				       float *SpectrumValue
				       /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("GetSpectrum"), DISPID(37));
	TAutoArgs < 1 > _args;
	_args[1] = Frequency /*[VT_I4:0] */ ;
	return OutRetValSetterPtr(SpectrumValue /*[VT_R4:1] */ , _args,
				  OleFunction(_dispid, _args));
    }

    template < class T > float __fastcall
	IProbeDispT < T >::GetSpectrum(long Frequency /*[in] */ ) {
	float SpectrumValue;
	this->GetSpectrum(Frequency, (float *) &SpectrumValue);
	return SpectrumValue;
    }

// *********************************************************************//
// SmartIntf: TCOMIOutputProbes
// Interface: IOutputProbes
// *********************************************************************//
    template < class T > HRESULT __fastcall
	TCOMIOutputProbesT <
	T >::get_Item(VARIANT ProbeIndexVal /*[in] */ ,
		      Ca200srvrlib_tlb::IProbe **
		      ProbeVal /*[out,retval] */ ) {
	return (*this)->get_Item(ProbeIndexVal, ProbeVal);
    }

    template < class T > Ca200srvrlib_tlb::IProbe * __fastcall
	TCOMIOutputProbesT <
	T >::get_Item(VARIANT ProbeIndexVal /*[in] */ ) {
	Ca200srvrlib_tlb::IProbe * ProbeVal;
	OLECHECK(this->
		 get_Item(, (Ca200srvrlib_tlb::IProbe **) & ProbeVal));
	return ProbeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIOutputProbesT <
	T >::get__NewEnum(LPUNKNOWN * pVal /*[out,retval] */ ) {
	return (*this)->get__NewEnum(pVal);
    }

    template < class T > LPUNKNOWN __fastcall
	TCOMIOutputProbesT < T >::get__NewEnum(void) {
	LPUNKNOWN pVal;
	OLECHECK(this->get__NewEnum((LPUNKNOWN *) & pVal));
	return pVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIOutputProbesT <
	T >::get_Count(long *CountVal /*[out,retval] */ ) {
	return (*this)->get_Count(CountVal);
    }

    template < class T > long __fastcall
	TCOMIOutputProbesT < T >::get_Count(void) {
	long CountVal;
	OLECHECK(this->get_Count((long *) &CountVal));
	return CountVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIOutputProbesT < T >::Add(BSTR ProbeIDVal /*[in] */ ) {
	return (*this)->Add(ProbeIDVal);
    }

    template < class T > HRESULT __fastcall
	TCOMIOutputProbesT <
	T >::get_ItemOfNumber(long ProbeNumberVal /*[in] */ ,
			      Ca200srvrlib_tlb::IProbe **
			      ProbeVal /*[out,retval] */ ) {
	return (*this)->get_ItemOfNumber(ProbeNumberVal, ProbeVal);
    }

    template < class T > Ca200srvrlib_tlb::IProbe * __fastcall
	TCOMIOutputProbesT <
	T >::get_ItemOfNumber(long ProbeNumberVal /*[in] */ ) {
	Ca200srvrlib_tlb::IProbe * ProbeVal;
	OLECHECK(this->
		 get_ItemOfNumber(,
				  (Ca200srvrlib_tlb::
				   IProbe **) & ProbeVal));
	return ProbeVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIOutputProbesT < T >::AddAll(void) {
	return (*this)->AddAll();
    }

    template < class T > HRESULT __fastcall
	TCOMIOutputProbesT <
	T >::Clone(Ca200srvrlib_tlb::IOutputProbes **
		   CloneVal /*[out,retval] */ ) {
	return (*this)->Clone(CloneVal);
    }

    template < class T > Ca200srvrlib_tlb::IOutputProbes * __fastcall
	TCOMIOutputProbesT < T >::Clone(void) {
	Ca200srvrlib_tlb::IOutputProbes * CloneVal;
	OLECHECK(this->
		 Clone((Ca200srvrlib_tlb::IOutputProbes **) & CloneVal));
	return CloneVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIOutputProbesT < T >::RemoveAll(void) {
	return (*this)->RemoveAll();
    }

// *********************************************************************//
// DispIntf:  IOutputProbes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3EE4760C-B9F3-47B1-953F-F5A2F83FF688}
// *********************************************************************//
    template < class T > HRESULT __fastcall
	IOutputProbesDispT <
	T >::get_Item(VARIANT ProbeIndexVal /*[in] */ ,
		      Ca200srvrlib_tlb::IProbe **
		      ProbeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
	TAutoArgs < 1 > _args;
	_args[1] = ProbeIndexVal /*[VT_VARIANT:0] */ ;
	return
	    OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::
					       IProbe **) ProbeVal
			       /*[VT_USERDEFINED:2] */ , _args,
			       OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::IProbe * __fastcall
	IOutputProbesDispT <
	T >::get_Item(VARIANT ProbeIndexVal /*[in] */ ) {
	Ca200srvrlib_tlb::IProbe * ProbeVal;
	this->get_Item(ProbeIndexVal,
		       (Ca200srvrlib_tlb::IProbe **) & ProbeVal);
	return ProbeVal;
    }

    template < class T > HRESULT __fastcall
	IOutputProbesDispT <
	T >::get__NewEnum(LPUNKNOWN * pVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(pVal /*[VT_UNKNOWN:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > LPUNKNOWN __fastcall
	IOutputProbesDispT < T >::get__NewEnum(void) {
	LPUNKNOWN pVal;
	this->get__NewEnum((LPUNKNOWN *) & pVal);
	return pVal;
    }

    template < class T > HRESULT __fastcall
	IOutputProbesDispT <
	T >::get_Count(long *CountVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(CountVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	IOutputProbesDispT < T >::get_Count(void) {
	long CountVal;
	this->get_Count((long *) &CountVal);
	return CountVal;
    }

    template < class T > HRESULT __fastcall
	IOutputProbesDispT < T >::Add(BSTR ProbeIDVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("Add"), DISPID(5));
	TAutoArgs < 1 > _args;
	_args[1] = ProbeIDVal /*[VT_BSTR:0] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	IOutputProbesDispT <
	T >::get_ItemOfNumber(long ProbeNumberVal /*[in] */ ,
			      Ca200srvrlib_tlb::IProbe **
			      ProbeVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("ItemOfNumber"), DISPID(6));
	TAutoArgs < 1 > _args;
	_args[1] = ProbeNumberVal /*[VT_I4:0] */ ;
	return
	    OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::
					       IProbe **) ProbeVal
			       /*[VT_USERDEFINED:2] */ , _args,
			       OlePropertyGet(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::IProbe * __fastcall
	IOutputProbesDispT <
	T >::get_ItemOfNumber(long ProbeNumberVal /*[in] */ ) {
	Ca200srvrlib_tlb::IProbe * ProbeVal;
	this->get_ItemOfNumber(ProbeNumberVal,
			       (Ca200srvrlib_tlb::IProbe **) & ProbeVal);
	return ProbeVal;
    }

    template < class T > HRESULT __fastcall
	IOutputProbesDispT < T >::AddAll() {
	_TDispID _dispid(*this, OLETEXT("AddAll"), DISPID(7));
	return OleFunction(_dispid);
    }

    template < class T > HRESULT __fastcall
	IOutputProbesDispT <
	T >::Clone(Ca200srvrlib_tlb::IOutputProbes **
		   CloneVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Clone"), DISPID(8));
	TAutoArgs < 0 > _args;
	return
	    OutRetValSetterPtr((LPDISPATCH *) (Ca200srvrlib_tlb::
					       IOutputProbes **) CloneVal
			       /*[VT_USERDEFINED:2] */ , _args,
			       OleFunction(_dispid, _args));
    }

    template < class T > Ca200srvrlib_tlb::IOutputProbes * __fastcall
	IOutputProbesDispT < T >::Clone(void) {
	Ca200srvrlib_tlb::IOutputProbes * CloneVal;
	this->Clone((Ca200srvrlib_tlb::IOutputProbes **) & CloneVal);
	return CloneVal;
    }

    template < class T > HRESULT __fastcall
	IOutputProbesDispT < T >::RemoveAll() {
	_TDispID _dispid(*this, OLETEXT("RemoveAll"), DISPID(9));
	return OleFunction(_dispid);
    }

// *********************************************************************//
// SmartIntf: TCOMIMemory
// Interface: IMemory
// *********************************************************************//
    template < class T > HRESULT __fastcall
	TCOMIMemoryT <
	T >::get_ChannelNO(long *ChannelNOVal /*[out,retval] */ ) {
	return (*this)->get_ChannelNO(ChannelNOVal);
    }

    template < class T > long __fastcall
	TCOMIMemoryT < T >::get_ChannelNO(void) {
	long ChannelNOVal;
	OLECHECK(this->get_ChannelNO((long *) &ChannelNOVal));
	return ChannelNOVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIMemoryT < T >::set_ChannelNO(long ChannelNOVal /*[in] */ ) {
	return (*this)->set_ChannelNO(ChannelNOVal);
    }

    template < class T > HRESULT __fastcall
	TCOMIMemoryT <
	T >::get_ChannelID(BSTR * ChannelIDVal /*[out,retval] */ ) {
	return (*this)->get_ChannelID(ChannelIDVal);
    }

    template < class T > BSTR __fastcall
	TCOMIMemoryT < T >::get_ChannelID(void) {
	BSTR ChannelIDVal = 0;
	OLECHECK(this->get_ChannelID((BSTR *) & ChannelIDVal));
	return ChannelIDVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIMemoryT < T >::set_ChannelID(BSTR ChannelIDVal /*[in] */ ) {
	return (*this)->set_ChannelID(ChannelIDVal);
    }

    template < class T > HRESULT __fastcall
	TCOMIMemoryT < T >::GetReferenceColor(BSTR ProbeIDVal /*[in] */ ,
					      float *XVal /*[out] */ ,
					      float *YVal /*[out] */ ,
					      float *LvVal /*[out] */ ) {
	return (*this)->GetReferenceColor(ProbeIDVal, XVal, YVal, LvVal);
    }

    template < class T > HRESULT __fastcall
	TCOMIMemoryT < T >::SetChannelID(BSTR ChannelIDVal /*[in] */ ) {
	return (*this)->SetChannelID(ChannelIDVal);
    }

    template < class T > HRESULT __fastcall
	TCOMIMemoryT < T >::GetMemoryStatus(long ProbeNOVal /*[in] */ ,
					    long *CalProbeSNOVal /*[out] */
					    ,
					    long *RefProbeSNOVal /*[out] */
					    ,
					    long *CalModeVal /*[out] */ ) {
	return (*this)->GetMemoryStatus(ProbeNOVal, CalProbeSNOVal,
					RefProbeSNOVal, CalModeVal);
    }

    template < class T > HRESULT __fastcall
	TCOMIMemoryT < T >::CheckCalData(long ProbeNOVal /*[in] */ ,
					 BSTR FileNameVal /*[in] */ ,
					 long *ResultVal /*[out,retval] */
					 ) {
	return (*this)->CheckCalData(ProbeNOVal, FileNameVal, ResultVal);
    }

    template < class T > long __fastcall
	TCOMIMemoryT < T >::CheckCalData(long ProbeNOVal /*[in] */ ,
					 BSTR FileNameVal /*[in] */ ) {
	long ResultVal;
	OLECHECK(this->CheckCalData(, (long *) &ResultVal));
	return ResultVal;
    }

    template < class T > HRESULT __fastcall
	TCOMIMemoryT < T >::CopyToFile(long ProbeNOVal /*[in] */ ,
				       BSTR FileNameVal /*[in] */ ) {
	return (*this)->CopyToFile(ProbeNOVal, FileNameVal);
    }

    template < class T > HRESULT __fastcall
	TCOMIMemoryT < T >::CopyFromFile(long ProbeNOVal /*[in] */ ,
					 BSTR FileNameVal /*[in] */ ) {
	return (*this)->CopyFromFile(ProbeNOVal, FileNameVal);
    }

// *********************************************************************//
// DispIntf:  IMemory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {20EA33BB-6914-465A-B98E-8DBD4E386CD0}
// *********************************************************************//
    template < class T > HRESULT __fastcall
	IMemoryDispT <
	T >::get_ChannelNO(long *ChannelNOVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("ChannelNO"), DISPID(1));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(ChannelNOVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	IMemoryDispT < T >::get_ChannelNO(void) {
	long ChannelNOVal;
	this->get_ChannelNO((long *) &ChannelNOVal);
	return ChannelNOVal;
    }

    template < class T > HRESULT __fastcall
	IMemoryDispT < T >::set_ChannelNO(long ChannelNOVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("ChannelNO"), DISPID(1));
	TAutoArgs < 1 > _args;
	_args[1] = ChannelNOVal /*[VT_I4:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	IMemoryDispT <
	T >::get_ChannelID(BSTR * ChannelIDVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("ChannelID"), DISPID(2));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(ChannelIDVal /*[VT_BSTR:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > BSTR __fastcall
	IMemoryDispT < T >::get_ChannelID(void) {
	BSTR ChannelIDVal;
	this->get_ChannelID((BSTR *) & ChannelIDVal);
	return ChannelIDVal;
    }

    template < class T > HRESULT __fastcall
	IMemoryDispT < T >::set_ChannelID(BSTR ChannelIDVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("ChannelID"), DISPID(2));
	TAutoArgs < 1 > _args;
	_args[1] = ChannelIDVal /*[VT_BSTR:0] */ ;
	return OlePropertyPut(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	IMemoryDispT < T >::GetReferenceColor(BSTR ProbeIDVal /*[in] */ ,
					      float *XVal /*[out] */ ,
					      float *YVal /*[out] */ ,
					      float *LvVal /*[out] */ ) {
	_TDispID _dispid(*this, OLETEXT("GetReferenceColor"), DISPID(3));
	TAutoArgs < 4 > _args;
	_args[1] = ProbeIDVal /*[VT_BSTR:0] */ ;
	_args[2] = XVal /*[VT_R4:1] */ ;
	_args[3] = YVal /*[VT_R4:1] */ ;
	_args[4] = LvVal /*[VT_R4:1] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	IMemoryDispT < T >::SetChannelID(BSTR ChannelIDVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("SetChannelID"), DISPID(4));
	TAutoArgs < 1 > _args;
	_args[1] = ChannelIDVal /*[VT_BSTR:0] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	IMemoryDispT < T >::GetMemoryStatus(long ProbeNOVal /*[in] */ ,
					    long *CalProbeSNOVal /*[out] */
					    ,
					    long *RefProbeSNOVal /*[out] */
					    ,
					    long *CalModeVal /*[out] */ ) {
	_TDispID _dispid(*this, OLETEXT("GetMemoryStatus"), DISPID(5));
	TAutoArgs < 4 > _args;
	_args[1] = ProbeNOVal /*[VT_I4:0] */ ;
	_args[2] = CalProbeSNOVal /*[VT_I4:1] */ ;
	_args[3] = RefProbeSNOVal /*[VT_I4:1] */ ;
	_args[4] = CalModeVal /*[VT_I4:1] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	IMemoryDispT < T >::CheckCalData(long ProbeNOVal /*[in] */ ,
					 BSTR FileNameVal /*[in] */ ,
					 long *ResultVal /*[out,retval] */
					 ) {
	_TDispID _dispid(*this, OLETEXT("CheckCalData"), DISPID(6));
	TAutoArgs < 2 > _args;
	_args[1] = ProbeNOVal /*[VT_I4:0] */ ;
	_args[2] = FileNameVal /*[VT_BSTR:0] */ ;
	return OutRetValSetterPtr(ResultVal /*[VT_I4:1] */ , _args,
				  OleFunction(_dispid, _args));
    }

    template < class T > long __fastcall
	IMemoryDispT < T >::CheckCalData(long ProbeNOVal /*[in] */ ,
					 BSTR FileNameVal /*[in] */ ) {
	long ResultVal;
	this->CheckCalData(ProbeNOVal, FileNameVal, (long *) &ResultVal);
	return ResultVal;
    }

    template < class T > HRESULT __fastcall
	IMemoryDispT < T >::CopyToFile(long ProbeNOVal /*[in] */ ,
				       BSTR FileNameVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("CopyToFile"), DISPID(7));
	TAutoArgs < 2 > _args;
	_args[1] = ProbeNOVal /*[VT_I4:0] */ ;
	_args[2] = FileNameVal /*[VT_BSTR:0] */ ;
	return OleFunction(_dispid, _args);
    }

    template < class T > HRESULT __fastcall
	IMemoryDispT < T >::CopyFromFile(long ProbeNOVal /*[in] */ ,
					 BSTR FileNameVal /*[in] */ ) {
	_TDispID _dispid(*this, OLETEXT("CopyFromFile"), DISPID(8));
	TAutoArgs < 2 > _args;
	_args[1] = ProbeNOVal /*[VT_I4:0] */ ;
	_args[2] = FileNameVal /*[VT_BSTR:0] */ ;
	return OleFunction(_dispid, _args);
    }

// *********************************************************************//
// DispIntf:  _ICaEvents
// Flags:     (4096) Dispatchable
// GUID:      {F7663750-5900-45EB-905F-78C5D5378481}
// *********************************************************************//
    template < class T > void __fastcall
	_ICaEventsDispT < T >::ExeCalZero() {
	_TDispID _dispid( /* ExeCalZero */ DISPID(1));
	OleProcedure(_dispid);
    }

// *********************************************************************//
// DispIntf:  IProbeInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5C542273-19D5-4C56-A12A-A58B1BAAD65E}
// *********************************************************************//
    template < class T > HRESULT __fastcall
	IProbeInfoDispT < T >::get_TypeName(BSTR * pVal /*[out,retval] */ )
    {
	_TDispID _dispid(*this, OLETEXT("TypeName"), DISPID(1));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(pVal /*[VT_BSTR:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > BSTR __fastcall
	IProbeInfoDispT < T >::get_TypeName(void) {
	BSTR pVal;
	this->get_TypeName((BSTR *) & pVal);
	return pVal;
    }

    template < class T > HRESULT __fastcall
	IProbeInfoDispT < T >::get_TypeNO(long *pVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("TypeNO"), DISPID(2));
	TAutoArgs < 0 > _args;
	return OutRetValSetterPtr(pVal /*[VT_I4:1] */ , _args,
				  OlePropertyGet(_dispid, _args));
    }

    template < class T > long __fastcall
	IProbeInfoDispT < T >::get_TypeNO(void) {
	long pVal;
	this->get_TypeNO((long *) &pVal);
	return pVal;
    }

// *********************************************************************//
// DispIntf:  ICaOption
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3CBE6157-1D53-4CAE-B4B0-33ACC30E6421}
// *********************************************************************//
    template < class T > HRESULT __fastcall
	ICaOptionDispT < T >::Command(BSTR CommandVal /*[in] */ ,
				      BSTR *
				      ResponseVal /*[out,retval] */ ) {
	_TDispID _dispid(*this, OLETEXT("Command"), DISPID(1));
	TAutoArgs < 1 > _args;
	_args[1] = CommandVal /*[VT_BSTR:0] */ ;
	return OutRetValSetterPtr(ResponseVal /*[VT_BSTR:1] */ , _args,
				  OleFunction(_dispid, _args));
    }

    template < class T > BSTR __fastcall
	ICaOptionDispT < T >::Command(BSTR CommandVal /*[in] */ ) {
	BSTR ResponseVal;
	this->Command(CommandVal, (BSTR *) & ResponseVal);
	return ResponseVal;
    }

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Ca200
// Interface: TCOMICa200
// *********************************************************************//
    typedef TCoClassCreatorT < TCOMICa200, ICa200, &CLSID_Ca200,
	&IID_ICa200 > CoCa200;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Cas
// Interface: TCOMICas
// *********************************************************************//
    typedef TCoClassCreatorT < TCOMICas, ICas, &CLSID_Cas,
	&IID_ICas > CoCas;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Ca
// Interface: TCOMICa
// *********************************************************************//
    typedef TCoClassCreatorT < TCOMICa, ICa, &CLSID_Ca, &IID_ICa > CoCa;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Memory
// Interface: TCOMIMemory
// *********************************************************************//
    typedef TCoClassCreatorT < TCOMIMemory, IMemory, &CLSID_Memory,
	&IID_IMemory > CoMemory;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Probes
// Interface: TCOMIProbes
// *********************************************************************//
    typedef TCoClassCreatorT < TCOMIProbes, IProbes, &CLSID_Probes,
	&IID_IProbes > CoProbes;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Probe
// Interface: TCOMIProbe
// *********************************************************************//
    typedef TCoClassCreatorT < TCOMIProbe, IProbe, &CLSID_Probe,
	&IID_IProbe > CoProbe;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : OutputProbes
// Interface: TCOMIOutputProbes
// *********************************************************************//
    typedef TCoClassCreatorT < TCOMIOutputProbes, IOutputProbes,
	&CLSID_OutputProbes, &IID_IOutputProbes > CoOutputProbes;
#endif				//   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Ca
// Event Interface : _ICaEvents
// *********************************************************************//
  template < class T > class TEvents_Ca:public IConnectionPointImpl < T,
	&DIID__ICaEvents,
	CComUnkArray < CONNECTIONPOINT_ARRAY_SIZE > >
	/* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
    {
      public:
	void Fire_ExeCalZero(void);
      protected:
	_ICaEventsDisp m_EventIntfObj;
    };

    template < class T > void
     TEvents_Ca < T >::Fire_ExeCalZero(void) {
	T *pT = (T *) this;
	pT->Lock();
	IUnknown **pp = m_vec.begin();
	while (pp < m_vec.end()) {
	    if (*pp != NULL) {
		m_EventIntfObj.Attach(*pp);
		m_EventIntfObj.ExeCalZero();
		m_EventIntfObj.Attach(0);
	    }
	    pp++;
	}
	pT->Unlock();
    }

#endif				//   __TLB_NO_EVENT_WRAPPERS

};				// namespace Ca200srvrlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using namespace Ca200srvrlib_tlb;
#endif

#pragma option pop

#endif				// CA200SRVRLib_TLBH

